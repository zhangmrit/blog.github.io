<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2015年小谈</title>
    <url>/2016/02/05/2015YearTalk/</url>
    <content><![CDATA[<p>年关将近，到了该说说有些话的时候了。回首2015，经历的很多，得到的很多，成就的很少。下面，来数数那些坑爹的人和事：</p>
<span id="more"></span>
<h3 id="工作经验"><a class="header-anchor" href="#工作经验">¶</a>工作经验</h3>
<h4 id="上半年"><a class="header-anchor" href="#上半年">¶</a>上半年</h4>
<p>14年底来到某塑，一心想着大展拳脚，实现理想和报复，忽略了太多细节。性格方面的因素注定我要在这场轰轰烈烈的斗争中失败，结局也不是谁胜谁负，那半年，比较迷茫，搞不清自己追求的到底是什么。生活上，工作上的双重压力，促使那场决战的爆发。或许是没有准备好去扮演那样的角色吧，年轻的我还不适合当一名领导者。不过我还是会坚持自己的理念，力图打造自己和其他程序员满意的环境。</p>
<h4 id="下半年"><a class="header-anchor" href="#下半年">¶</a>下半年</h4>
<p>从上一岗位退出，自视能力还有待提高，于是继续应聘基层工作。选择了自以为还比较合适的一家单位，年轻气盛地我，进入公司后忍受不了长期的雪藏。于是拼命想展现自己，却忽略了职场生活中的至关重要的细节。每一家公司都有其运行的状态，不同的状态需要不同的人，也会有不同的人应运而生。工作才一年，又没有认真去思考过这些问题，导致对公司情况认识不足。那时的我，全身心投入到公司的建设，因为是第一个员工，也尽心尽力做好每一件事，至少出手的东西都是自己所认可的。慢慢地，干掉了自己应该干、不应该自己干的所有的活，终于矛盾触发，触及到他人的利益。<br>
从没有想过有朝一日自己会面临这种窘境，并不是全心全意地付出就能得到应有的回报，公司资源有限，能给到的利益只有那么多，还存在致命地内耗。所以枪打出头鸟，这时候你的努力对于他人来说便是一种威胁。结果可想而知。</p>
<h3 id="思想境界"><a class="header-anchor" href="#思想境界">¶</a>思想境界</h3>
<ul>
<li>活是干不完的</li>
</ul>
<p>不是说干活拖拉或者只做自己该做的事情，自己该做的事情，应该保持高效，做完了多注重自我的提升。不仅如此，要耐住寂寞，做好“路漫漫其修远兮，吾将上下而求索”的决心。</p>
<ul>
<li>韬光养晦</li>
</ul>
<p>无需急着表现自己，只有生存下去才是王道，加强自我提升。枪打出头鸟，职场新人，切勿锋芒毕露。</p>
<ul>
<li>不忘初心</li>
</ul>
<p>不论在什么时候，都要保持最初的那份心，对自己喜爱的事情持之以恒，成功往往离不开不放弃。</p>
<ul>
<li>弥足珍贵</li>
</ul>
<p>在这个纷杂的世界里，最珍贵的友情。职场中往往没有朋友，因为到处充斥着硝烟的味道，有了利益冲突，再高洁的人都会堕落。为了保证自己不堕落，区分哪些人是真朋友，哪些人是假朋友。所以同窗、发小、老友都是一生中可能最宝贵的财富，珍惜现在的朋友，保持那些年的童真。</p>
<h3 id="代码世界"><a class="header-anchor" href="#代码世界">¶</a>代码世界</h3>
<p>作为程序员，如果连代码积累都没有，那这一年真是白活了，下面回忆一下自己今年接触的新鲜事吧：</p>
<ul>
<li>angular.js</li>
<li>spring-boot</li>
<li>jpa-data</li>
<li>禅道项目管理</li>
<li>solr</li>
<li>BootStrap 前端框架</li>
<li>maven私服nexus</li>
<li>douku wiki</li>
<li>Mybatis整合dubbo</li>
<li>layer 消息提示</li>
<li>HandlebarsJS 一款模版引擎</li>
<li>工商银行网银支付开发</li>
<li>redis</li>
<li>nginx</li>
<li>自动化测试：RBF+Selenium2</li>
<li>持续集成：Jenkins+sonar</li>
<li>hexo</li>
<li>微信公众号开发</li>
</ul>
<p>可能再多就记不起来了，想想这一年，好像弄过的还挺多哈。虽然经济上并没有什么大的变化，我始终相信，持之以恒，面包会有的，鲜花也会有的！</p>
<h3 id="尾声"><a class="header-anchor" href="#尾声">¶</a>尾声</h3>
<p>希望所有的好友日子都能好起来。大神、勇见、洛洛、明明、毛毛、杨杰、金鑫、贺鑫、智达、小刚新年快乐。单身的赶紧找另一半，有主的趁早结婚，事业有成！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&id=25706282&auto=1&height=66"></iframe>]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>2016新版支付宝APP支付的坑</title>
    <url>/2016/10/11/2016NewAlipayPaymentBug/</url>
    <content><![CDATA[<p>半年前做了支付宝APP支付的接口的封装，没想到，才几个月，支付宝对接口整体做了一次更新，然而还是用老套路去开发的我，一路蒙逼，最后只好重新看了一遍文档，下面列举一下新旧版本或者本身就存在的坑。希望大家引以为戒！</p>
<span id="more"></span>
<h4 id="参数的变化"><a class="header-anchor" href="#参数的变化">¶</a>参数的变化</h4>
<p>新版本参数将业务参数封装到了<code>biz_content</code>，这是新增的一个参数，这个简单，不太容易入坑，只要逐一比对即可。建议将参数放到HashMap中,用JSON字符串输出就行，如：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; <span class="keyword">params</span> = <span class="literal">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line"><span class="keyword">params</span>.put(<span class="string">&quot;app_id&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="params">...</span></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; bizMap = <span class="literal">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">bizMap.put(<span class="string">&quot;seller_id&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="params">...</span></span><br><span class="line"><span class="keyword">params</span>.put(<span class="string">&quot;biz_content&quot;</span>, JSON.toJSONString(bizMap));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">params</span>;</span><br></pre></td></tr></table></figure>
<h4 id="签名内容改变"><a class="header-anchor" href="#签名内容改变">¶</a>签名内容改变</h4>
<p>这里开始就有点神经了，不得不吐槽，前后都不一致。首先，老版本加密的条件中，要把<code>sign_type</code>剔除再进行加密，现在的加密要把这个参数也进行加密，然而在最后进行通知验签的时候，这个字段又必须得剔除，对于支付宝公司的朋友，我只能呵呵了。大家自行脑补……o(∩_∩)o</p>
<h4 id="最终结果url编码"><a class="header-anchor" href="#最终结果url编码">¶</a>最终结果url编码</h4>
<p>以前这个环节仅仅只要对key进行排序输出，现在多了对value进行url编码（即encode），不要仅对某几个参数进行encode，我就是这样进坑的，建议对之前的map进行排序输出的时候逐一编码，或者先全部编码再生成排序后的字符串。</p>
<h4 id="通知验签"><a class="header-anchor" href="#通知验签">¶</a>通知验签</h4>
<p>这里跟以前没什么变化，所以才会出<code>sign_type</code>的幺蛾子，这里估计沿用老的接口，然后一个奇葩的事情出现了，恭喜你，程序都对，就是验签失败，最后你会发现，支付宝RSA公钥变了，是的，TMD公钥变了哈哈，当然刚开发的朋友不会有这个坑。</p>
<p>上面就是我碰到的比较典型的坑，最后还是希望大家开发的时候逐一比对文档吧，毕竟用人家的东西，得按人家的心思来。</p>
]]></content>
      <categories>
        <category>alipay</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>你真的会写代码吗？</title>
    <url>/2017/02/13/DoYouReallyWriteCode/</url>
    <content><![CDATA[<p>《编写可读代码的艺术》这本书我想程序猿都很熟悉吧。平时不怎么读书的我也是心血来潮将这本书通读了一遍，果然是大师写的书啊，让我感受颇深！<br>
下面是我从这本“神书”中摘抄的一些精华，千万不要错过：</p>
<span id="more"></span>
<h2 id="把信息塞进名字中"><a class="header-anchor" href="#把信息塞进名字中">¶</a>把信息塞进名字中</h2>
<p><img src="http://p3.pstatp.com/large/1687000195b96d2c8170" alt="有比食人花更好的名字吗？|center"></p>
<ol>
<li>避免空泛的名字，像tmp和retval，除非使用它们有特殊的理由。</li>
<li>使用具体的名字来更细致地描述事物——ServerCanStart()这个名字就比CanListenOnPort更不清楚。</li>
<li>给变量名带上重要的细节——例如，在值为毫秒的变量后面加上_ms。</li>
<li>为作用域大的名字采用更长的名字——不要用让人费解的一个或两个字母的名字来命名在几屏之间都可见的变量。对于只存 在于几行之间的变量用短一点的名字更好。</li>
<li>有目的的使用大小写、下划线等——例如，你可以在类成员和局部变量后面加上”_”来区分它们。</li>
</ol>
<h2 id="不会误解的名字是最好的名字"><a class="header-anchor" href="#不会误解的名字是最好的名字">¶</a>不会误解的名字是最好的名字</h2>
<p><img src="http://p3.pstatp.com/large/16880001ffd06b07432e" alt="那么问题来了，是右边的线吗？|center"></p>
<ol>
<li>当要定义一个值的上限或下限时，max_和min_是很好的前缀。对于包含的范围，first和last是最好的选择。对于包含/排除范围，begin和end是最好的选择，因为它们最常用。</li>
<li>当为布尔值命名时，使用is和has这样的词来明确表示它是个布尔值，避免使用反义的词(例如disable_ssl)。</li>
<li>要小心用户对特定词的期望。例如，用户会期望get()或者size()是轻量的方法。</li>
</ol>
<h2 id="大家都愿意读有美感的代码"><a class="header-anchor" href="#大家都愿意读有美感的代码">¶</a>大家都愿意读有美感的代码</h2>
<p><img src="http://p3.pstatp.com/large/168800020146769bbb2b" alt="要疯了简直|center"></p>
<ol>
<li>如果多个代码块做相似的事情，尝试让它们有同样的剪影。</li>
<li>把代码按”列”对齐可以让代码更容易浏览。</li>
<li>如果在一段代码中提到A、B和C，那么不要在另一段中说B、C和A。选择一个有意义的顺序并始终用这样的顺序。</li>
<li>用空行来把大块代码分成逻辑上的“段落”。</li>
</ol>
<h2 id="什么地方不需要注释"><a class="header-anchor" href="#什么地方不需要注释">¶</a>什么地方不需要注释</h2>
<p><img src="http://p3.pstatp.com/large/16870001a2a5a6bd2073" alt="有没有此地无银三百两的感觉|center"></p>
<ol>
<li>能从代码本身中迅速地推断的事实。</li>
<li>用来粉饰烂代码（例如蹩脚的函数名）的“拐杖式注释”——应该把代码改好。</li>
</ol>
<h2 id="你应该记录下来的想法"><a class="header-anchor" href="#你应该记录下来的想法">¶</a>你应该记录下来的想法</h2>
<p><img src="http://p3.pstatp.com/large/16860000244a8859e586" alt="我可以笑吗？|center"></p>
<ol>
<li>对于为什么代码写成这样而不是那样的内在理由（“指导性批注”）。</li>
<li>代码中的缺陷，使用像TODO：或者XXX：这样的标记。</li>
<li>常量背后的故事，为什么是这个值。</li>
</ol>
<h2 id="站在读者的立场上思考"><a class="header-anchor" href="#站在读者的立场上思考">¶</a>站在读者的立场上思考</h2>
<p><img src="http://p3.pstatp.com/large/16870001a116f9278170" alt="给了等于没给|center"></p>
<ol>
<li>预料到代码中哪些部分会让读者说：“啊？”并且给它们加上注释。</li>
<li>为普通读者意料之外的行为加上注释。</li>
<li>在文件/类的级别上使用“全局观”注释来解释所有的部分是如何一起工作的。</li>
<li>用注释来总结代码块，使读者不致迷失在细节中。</li>
</ol>
<h2 id="把更多的信息装入更小的空间里"><a class="header-anchor" href="#把更多的信息装入更小的空间里">¶</a>把更多的信息装入更小的空间里</h2>
<p><img src="http://p1.pstatp.com/large/16880002090c168361f2" alt="言简意赅的注释也很重要！|center"></p>
<ol>
<li>当像“it”和“this”这样的代词可能指代多个事物时，避免使用它们。</li>
<li>尽量精确的描述函数的行为。</li>
<li>在注释中用精心挑选的输入/输出例子进行说明。</li>
<li>声明代码的高层次意图，而非明显的细节。</li>
<li>用嵌入的注释（如Function(/<em>arg =</em>/…)）来解释难以理解的函数参数。</li>
<li>用含义丰富的词来使注释简洁。</li>
</ol>
<h2 id="让代码的控制流更易读"><a class="header-anchor" href="#让代码的控制流更易读">¶</a>让代码的控制流更易读</h2>
<p><img src="http://p1.pstatp.com/large/1688000207441866cfd9" alt="那句话怎么说来着？|center"></p>
<ol>
<li>在写一个比较时，把改变的值写在左边，并且把更稳定的值写在右边更好一些。</li>
<li>你也可以重新排列if/else语句中的语句块。通常来讲，先处理正确的/简单的/有趣的情况。有时这些准则会冲突，但是当不冲突时，这是要遵循的经验法则。</li>
<li>三目运算符必须在结构非常简单的情况下使用。</li>
<li>嵌套的代码块需要更加集中精力去理解。应该把它们改写成更加“线性”的代码来避免深嵌套。</li>
<li>通常来讲提早返回可以减少嵌套并让代码整洁。“保护语句”（在函数顶部处理简单的情况时）尤其有用。</li>
</ol>
<h2 id="减少变量的数量和让它们尽量-轻量级-来让代码更有可读性"><a class="header-anchor" href="#减少变量的数量和让它们尽量-轻量级-来让代码更有可读性">¶</a>减少变量的数量和让它们尽量“轻量级”来让代码更有可读性</h2>
<p><img src="http://p1.pstatp.com/large/168600001eb8742db3a4" alt="这个配图很有意思哦|center"></p>
<ol>
<li>减少变量，即那些妨碍的变量。</li>
<li>减小每个变量的作用域，越小越好。</li>
<li>只写一次的变量更好。那些只设置一次值的变量（或者const、final、常量）使得代码更容易理解。</li>
</ol>
<p><strong><em>最后送大家一句我最近喜欢的话：当才华还撑不起野心时，那你就应该静下心来学习！</em></strong></p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员怎样升职</title>
    <url>/2017/08/24/HowToPromote/</url>
    <content><![CDATA[<p>在知乎上看到一个过2k赞的回答，觉得讲的非常好，和我的经历也很像，特此分享给大家。<a href="https://www.zhihu.com/question/20259295/answer/125138094">直达原文</a><br>
<strong>内容如下（部分排版和错误修改）</strong>：<br>
我是码农出身，工作十年，从初级程序猿（半年）- 项目主力（一年）- 初级技术管理（一年） - 中级技术管理（两年）- 部门管理（两年）- 高层管理（三年）- 职业经理人，一条路走过来，关于升职，有一些自己的心得可以分享。以下大致说说从技术到管理的转变，暂不涉及管理的进阶。</p>
<span id="more"></span>
<h3 id="1-love-coding-热爱编程"><a class="header-anchor" href="#1-love-coding-热爱编程">¶</a>1. Love Coding 热爱编程</h3>
<p>大四开始找工作的时候，我正在上一门可视化编程的课，大概就是用VC编写出可以绘图、简单动画和播放多媒体文件等各种操作的程序。基于这门课，我编写了贪吃蛇、俄罗斯方块等各种游戏。另外的一段编程经历是大二时候的Java大作业，编了一个很弱的图片管理器。实际上，这些程序都非常弱智，那时候的我算法极差，代码规范性极差，甚至于对SDK或库函数的掌握也极差，是个地地道道的菜鸟，但这并不妨碍我喜欢编程。我发现，当我坐在电脑前敲代码，或者对着千疮百孔的程序不断调试，打断点，加入调试代码，单步执行查看内存变化的时候，我是乐在其中的，甚至于忘了时间。所以，面临工作方向选择的时候，我毫不犹豫选了coding。</p>
<p>于是，当07年我在缺少指导，对Linux不甚了解，对路由器也一知半解的情况下，开始开发国内厂商的第一代11N路由器的时候，倾注了大量的精力阅读《LDD3》，搞定交换芯片驱动；大段大段的啃Linux Kernel源码，搞定netfilter/iptables；阅读《UNIX环境高级编程》，搞定各种同步互斥进程线程；阅读网上的各种技术博客，包括把竞争对手的GPL代码Down下来仔细阅读。。。一年里加班无数，五一十一也都是在加班中度过，一年下来基本上搞定了领导交给我的艰难任务。然后又用一两个月的时间，把产品上市后爆出来的各种Bug一一解决，最终赢回了市场口碑。</p>
<p>如果没有这种热爱，你就无法在日复一日的coding中保持专注，更不用说脱颖而出。</p>
<p>任何成功背后，都有不为人知的苦闷和寂寞。程序猿的苦逼之处，就在于别人高谈阔论指点江山的时候，别人推杯换盏觥筹交错的时候，别人出差南北纵横内外的时候，别人利用工作之便撩妹泡妞啪啪啪的时候，你只有面对屏幕，把键盘敲的啪啪啪。如果你忍受不了这种寂寞，体会不到其中的乐趣，请尽早换行。程序猿的高潮，来自于屏幕上排版良好的指令，按照你的意志精确执行，并且分毫不差。</p>
<h3 id="2-know-yourself-贵有自知之明-了解自己"><a class="header-anchor" href="#2-know-yourself-贵有自知之明-了解自己">¶</a>2. Know yourself 贵有自知之明，了解自己</h3>
<p>自知之明这个词，说的容易，做起来特别难。但又特别重要。</p>
<p>以前我团队里有个小伙，非常非常内向，话没说几句就脸红，后来程序猿不干了要去做展会，学跟人打交道，说是要挑战自己。我不知道他后来怎么样，估计结果不太好。人的性格在十几岁的时候基本就定性了，二十几岁的人再想彻底改变自己，极难，有这个毅力，估计什么都能做好了。</p>
<p>扯远了。这一条最想说的是，弄清楚你到底适不适合干程序猿这一行，我多年的经验总结下来，优秀的程序猿都有如下的性格特质（或部分）：细心严谨、细节强迫症、完美主义、做事情有条理、耐得住寂寞、喜欢跟机器跟代码打交道（相比跟人打交道）、口才一般不佳、容易偏激或钻牛角尖、人情世故方面稍显笨拙。与之相对的是销售：口才极佳滔滔不绝、擅长跟人打交道、为人处世圆滑、八面玲珑、说话虚虚实实、为达目的不择手段。所以，适合什么样的职业方向是有章可循的。</p>
<p>仔细想想自己是什么样的人，结合上一条，有没有一颗热爱coding的心，你就能知道自己到底适不适合这一行。</p>
<p>自知之明还体现在，干这一行的过程中，详细了解自己的各项技能的长短，扬长补短。程序猿不是简单会敲代码就行，构思、设计、编码、测试、调试，往往编码只占很小的比例。而且程序猿这一行范围又极广，底层驱动、操作系统、协议栈、前端、服务器、APP、数据库、大数据、分布式、系统集成。。。。。。怎么选择，怎样能够发挥优势，真的应该好好想想。</p>
<p>这一条展开来说，可以讲一天，具体也可以参照我在其他问题下面的回答。职业生涯规划里面，知己知彼是非常非常重要的，知己，即是了解自我的个性、特点、优劣势、需求；知彼，即是了解行业、企业、团队、职位的情况和要求。</p>
<h3 id="3-be-reliable-可靠-说到做到-做好本职"><a class="header-anchor" href="#3-be-reliable-可靠-说到做到-做好本职">¶</a>3. Be reliable 可靠，说到做到，做好本职</h3>
<p>作为程序猿，最基本要求是：代码可读性好、功能正常没有明显bug。</p>
<p>但我见过太多这行里的毛头小伙，数字常量到处埋，函数命名用拼音，if else 十层八层嵌套，匈牙利命名法和Linux命名法混杂，代码像挤在一张皱了的纸上，零注释或写完代码补注释，异常处理缺失，还有基本功能一用就崩溃，还辩解说，在我那里是好的呀。遇到这一类人，通常我在心里先给打个D等（ABCD），日后恐难以翻身。</p>
<p>还有稍微进阶一点的毛病，说这个功能包我身上没问题，又或者一周之内绝对给你搞定，领导你放心。最后拿出来的代码不是错漏百出，就是规定时间根本完不成，而且到deadline前你询问他的时候才告诉你搞不定。。。项目组里有这样的人，要么得配一个给他擦屁股的，要么得配一个项目助理时刻监督他，换一句话说，他的贡献值其实为负。</p>
<p>程序猿要想进阶，其实什么设计模式、架构、高深算法、莫测技术都不重要，这些都只是术，或者说套路。最核心的应该是，把简单的任务完成好，之后再完成更难一点的任务，这样你就慢慢进阶了。为了自己的承诺和项目组整体的进度，有的时候，你需要在保证质量的基础上，拼命加班，不负所托。</p>
<p>再补充一点，可靠并不是说绝不出错，是人都会犯错。但你不能重复犯错，相同的错误出现两次，会严重影响别人对你的信心。</p>
<h3 id="4-work-hardest-以绝大多数程序猿的努力程度-还轮不到拼天赋"><a class="header-anchor" href="#4-work-hardest-以绝大多数程序猿的努力程度-还轮不到拼天赋">¶</a>4. Work hardest 以绝大多数程序猿的努力程度，还轮不到拼天赋</h3>
<p>这一点可能会有争议，也会有很多程序猿跳出来说，老子996都不止，一周工作80个小时都有了。并不否认，很多行业里的程序猿，以互联网尤甚，加班是很夸张的。但我想表达的是，你要做你们团队里最努力的那个人，别人工作80个小时，你就工作90个小时。你以为所有爬上去的人都是领导亲戚或是被潜规则？别傻了，如果大家资质差不多，一定是最努力的那个人首先得到机会。领导又不傻，马群里挑一匹跑的最快挑的最重的来带头，肯定会有示范效应，也容易服众。当然，健康是自己的，如何保持足够的休息和锻炼是你必须认真考虑的问题，不是你领导考虑的问题。另外，如果真的资质相差太大，省点力气，排队等机会吧，不行就换行。程序猿这一行里，最牛逼和最平庸之间的生产效率之比大致是50：1。</p>
<p>果然这一点引起了极大的争议。补充一些说明吧，对我来说加班最夸张的一段时间是八点半上班，除去午休一个半小时，晚上十一点下班，差不多持续一个月。我从来都不认同不眠不休的持续高强度加班，所谓的弹性工作制其实是最坑人的，每天工作到夜里一两点然后第二天十点十一点去上班？有意义吗？十二点准时睡觉，第二天八九点准时去上班，想挂掉都没那么容易。这一点很感激前东家死板的考勤制度。</p>
<p>另外，在我的职业生涯里，从来都是提倡快乐工作快乐生活，我所带的部门，篮球羽毛球健身水平都是公司顶尖。最忙的时候我一样一周打球两三次。可现实中一有空不用加班依然打游戏看片呆坐电脑前熬夜的程序猿不在少数。不要为自己不健康和颓废的作息找借口。真正牛逼的人，懂得人生是马拉松而不是百米冲刺的道理。</p>
<p>另外的另外，真的加班到力不从心快要挂了还无法出人头地，换工作吧，不行就换行。你的负能量和颓废气息三个街区外卖烤红薯的大妈都闻得出来。</p>
<p>另外的另外的另外，刚看到春雨医生CEO去世的消息，非常震惊，相比升职，好好活着更为重要，生者共勉。</p>
<h3 id="5-do-the-simple-things-right-再简单的事情都要做好-注重细节"><a class="header-anchor" href="#5-do-the-simple-things-right-再简单的事情都要做好-注重细节">¶</a>5. Do the simple things right 再简单的事情都要做好，注重细节</h3>
<p>你review过的代码里最低级的错误是什么？我遇到很多很多，“==”写成“=”、三个参数只传了俩、“1 &lt;= month &amp;&amp; month &lt;= 12” 写成“0 &lt; month &amp;&amp; month &lt; 12”、不判断返回值就直接下一步调用，太多太多。</p>
<p>写邮件的时候，很多人直接把话都写在标题，内容为空；也有标题空着的，或者叫“经理你好”；或者邮件字体时大时小，一会黑一会蓝，看的人时刻有惊喜。</p>
<p>写文档的时候，busy写成 buzy，该换行分段偏不，该用流程图说明的偏要用文字，好不容易画个流程图，方框里一会是实体一会是操作，箭头各种乱指，你写得出来，别人可看不下去。</p>
<p>这类人，你是老板，你敢提拔他当主管？</p>
<p>再举一个正面的例子，我的团队里曾经缺乏一个项目助理，不得已选了一个程序猿小伙，让他兼职管管样机、发发通知，小伙没有怨言，除了自己的代码照常写的非常稳妥之外，兢兢业业做好这些小事。后来没多久他就当上了主管。一个有能力把小事做到极致的人，也必定有潜力把大事做好。</p>
<h3 id="6-be-open-minded-don-t-be-defensive-心态开放-接受他人意见-别人批评建议的时候不要习惯性辩解和说不"><a class="header-anchor" href="#6-be-open-minded-don-t-be-defensive-心态开放-接受他人意见-别人批评建议的时候不要习惯性辩解和说不">¶</a>6. Be open-minded, don’t be defensive 心态开放，接受他人意见，别人批评建议的时候不要习惯性辩解和说不</h3>
<p>以前我的团队里有几个同一届毕业的优秀小伙，其中两人，就叫A和B吧。以编程水平、技术广度来衡量，A要更胜一筹，当然B也是杰出的程序猿。按理说，先得到晋升的应该是A，实际上，B很快就连升两级，再后来就带一个大型的团队了，而A始终是最基层的主管。</p>
<p>为什么？我举一些实际的例子。</p>
<p>作为年轻人，免不了有做的不足的地方，通常我都会面对面跟他们具体指出来，B通常会说：“收到，以后我一定注意”、“我不是很明白，能否给我一些具体事例，或者再给我解释一下。。。好的我明白了”、“我的理解是这样的不知道对不对。。。好的知道了”。然后在接下来的一个季度里，你很快就能看到他迅速改进，原来的弱项变成了他的强项。</p>
<p>而A呢？他会说“不是吧，我觉得不是这样的”、“这些道理虽然对，但是有点要求过高吧”，而往后，你所希望看到的变化还是没有发生，或者收效甚微。</p>
<p>当你的领导，愿意明确对你提出指导，不管是耐心的说教还是严厉的批评，你都应该抱着“有则改之无则加勉”的心态，即使要反驳，也要准备充分的理由和依据。面对领导的意见，要弄清楚其准确意图，然后实施针对性的改进措施。这就是团队里的游戏规则和生存之道。即使不是领导，是平级和下属，也应该采用类似的心态和应对方法。</p>
<h3 id="7-be-logical-有很好的条理-想事情做事情有逻辑"><a class="header-anchor" href="#7-be-logical-有很好的条理-想事情做事情有逻辑">¶</a>7. Be logical. 有很好的条理，想事情做事情有逻辑</h3>
<p>很多程序猿，表达的时候通常是“我认为”、“我觉得”，或者说“听我的，只要这样这样，就能怎样怎样”但是一旦你追问其结论的依据，或者推导过程时，他又拿不出来。又或者，只知道埋头苦干，压根不管方向对错，轻重缓急。</p>
<p>程序猿是100%纯正的脑力工作者，但很多人却把自己变成体力工作者，自嘲自己身处劳动密集型产业，有的人甚至以日产出几千行代码为傲。这无疑是自废武功，自己把自己往“码农”的“农”字上推。定位问题，分析问题，解决问题，贯穿其中的都突出一个“逻辑”。无论是写设计文档、编写代码、测试，还是产品功能、用户需求、交互设计，概莫能外。先思考，谋定而后动，思考的过程，也就是找出因果关系，找出1234条论据以支持论点，找出step1 step2 step3 直至结果的推导步骤的过程。</p>
<p>当你有良好的条理性，有严谨的逻辑，也许凭直觉也能做出正确的判断。但时刻别忘了这一点。</p>
<h3 id="8-be-thankful-懂得感恩"><a class="header-anchor" href="#8-be-thankful-懂得感恩">¶</a>8. Be thankful 懂得感恩</h3>
<p>什么是感恩？就是对指导、帮助、提携乃至批评过你的人的一种由衷的感激之情，懂得感恩的人都是善良的，善良且努力的人运气都不会太差（哈哈，仿烂鸡汤体）。只要你懂得感恩，甚至无需你做太多，只需要适时的表达，对方就能感受到你是孺子可教的，他就会觉得他的付出没有白费，而不是面对一个木头人或白眼狼。</p>
<p>同样还是上文的B童鞋，在我带过的几百人中间，他是最懂得感恩的一位。甚至于你在批评他的时候，他都会承认错误并感激你对他的指导。这样的人才，当他也拿出实实在在的业绩的时候，你怎能不提拔他？</p>
<p>而作为对比，有太多的人，你曾经无数次的帮助过他，无论工作上还是生活中，但从未听到他的一句感谢。这样的人，只能呵呵以对。</p>
<h3 id="9-think-beyond-technology-不要只会纯技术化思维"><a class="header-anchor" href="#9-think-beyond-technology-不要只会纯技术化思维">¶</a>9. Think beyond technology 不要只会纯技术化思维</h3>
<p>很多程序猿，痴迷于修炼技术，常常会在一个简单功能模块里面运用某某高深的算法和莫测的技术，纯粹为了炫技，而不去考虑是否过度优化，是否用户并不需要这么复杂的功能，是否投入产出比并不合理。无视用户、产品和市场规律的思考方式，就是纯技术化思维。</p>
<p>典型的一个案例是，（可能是处女座程序猿），所有的Bug都必须解完才可以发布版本，不管是不是犄角旮旯或耗时很久的。我在工作的第二年，我的领导跟我说了一个概念“Time to market”，让我意识到，你最关注的问题，或许并不是用户最关注的问题。你要做的，是应该快速把产品发布，再去倾听用户的呼声，可能100万用户里，都不会有人关注你花了几周时间死磕的问题，但他们会爆出更多更重要更迫切的问题。</p>
<h3 id="10-understand-your-products-and-users-理解你的产品和用户"><a class="header-anchor" href="#10-understand-your-products-and-users-理解你的产品和用户">¶</a>10. Understand your products and users 理解你的产品和用户</h3>
<p>你要时刻关注你的产品，关注你的用户，从电商的网评，从售后的热线，从论坛的帖子，从行业外的朋友，获取他们对于你产品的第一手的评价。一个好的程序猿，也应该是一个好的产品经理。否则你就是一个缺乏大脑的泥瓦匠，而不是一个建筑师。</p>
<p>作为一个程序猿的leader，你是要代表团队去跟产品经理撕逼的，如果你不懂产品，那么你的团队也就完了。</p>
<h3 id="11-have-good-communication-skills-良好沟通"><a class="header-anchor" href="#11-have-good-communication-skills-良好沟通">¶</a>11. Have good communication skills 良好沟通</h3>
<p>做一个牛逼的程序猿，其实可以不用怎么讲话，用牛逼的代码和运行结果去碾压别人即可。但如果你想做程序猿的leader，还继续保持这么高冷的姿态可不行。沟通无疑是管理的基础，一个程序猿想升职，想做管理，必然需要证明自己拥有不错的沟通能力。跟高层领导要资源，跟产品经理撕逼，跟测试部门搞好关系，跟设计妹子开开玩笑，跟程序猿搞基，不会沟通显然是不行的，最好是亦庄亦谐，荤素兼备。</p>
<p>这里不展开讲如何拥有良好的沟通技巧。只说几点：1. 沟通的意愿最重要，只要你愿意主动沟通，事情总会向好的方面发展。2. 沟通要真诚，不要套路。3. 口才不行，你可以多用写，写还有个好处就是留有证据，方便以后撕逼。</p>
<h3 id="12-take-responsibility-承担责任"><a class="header-anchor" href="#12-take-responsibility-承担责任">¶</a>12. Take responsibility 承担责任</h3>
<p>常在河边走，哪有不湿鞋。代码写多了，挖坑是必然的。面对爆出来的Bug，面对领导的责备，没什么好说的，自己惹的，自己clean up。</p>
<p>放更长远来看，谁都会出错，不管你是程序猿，还是程序猿的leader，甚至是高管，总会被爆出问题。这时候是各种借口推诿，还是大大方方承认，并且用最快的速度处理干净？我认为正确的处理方式是后者，这不单单是能力问题，更多的是人品问题。</p>
<p>当你有朝一日当了leader，你手下犯了事，你也得大大方方站出来“我把关不严，责任我担”，绝不是把手下推出去了事（放你身上可能是小事，放他身上可能就得开除了），回过头再关起门内部处理。只有这样，你的手下才会服你，才会有人为你拼命干活。</p>
<p>最后，做不好管理就做纯技术，做资深专家、技术大拿也挺好，不要强扭。</p>
<p>第一次得到2K赞是始料未及的，有小小的惊喜。但也验证了那句话“林子大了，什么鸟都有”，许多负面的评论就冒出来了，有些我接受了，有些没忍住撕了一阵，有些看的我直乐。但始终没有被这些评论所烦扰，这是自己一年来最大的收获了。</p>
<h3 id="一些质疑和回答"><a class="header-anchor" href="#一些质疑和回答">¶</a>一些质疑和回答</h3>
<h4 id="质疑1：答主没提他是xx大学毕业的所以升职快？"><a class="header-anchor" href="#质疑1：答主没提他是xx大学毕业的所以升职快？">¶</a>质疑1：答主没提他是xx大学毕业的所以升职快？</h4>
<p>李开复哥大毕业，所以他的事业成功理所当然？拜托，哥大也是他考上的好吗，还不是回溯到他本身的努力和聪明。再者，这质疑的潜台词就是，xx毕业的才有可能升职这么快，不适用于其他人，大家散了吧。</p>
<p>以前也有类似的说法，背景论、阴谋论：比尔盖茨的母亲是IBM高管，巴菲特的父亲是国会议员，所以他们的成功无非就是靠背景，不过尔尔。可是企业高管的孩子，政府官员的娃，清华北大毕业生何止千万人，难道最终都是那么成功吗，为何比尔盖茨和巴菲特仅此一个？如果我们把别人的成功都归结于他所拥有的先天优势，忽略他们的聪明才智、开拓精神和巨大努力，这是在为甘于平庸和堕落找借口。请参考：</p>
<p>比尔盖茨的编程水平怎么样</p>
<p>实际上，所谓的成功学/成功经验的最大问题就是每个人的经历都是无法复制的。照着这些成功的经验去做，并不能保证你就一定飞黄腾达。更有人在评论里跟我纠结努力是不是成功的充分条件。用一句说烂了的话来讲“努力不一定能成功，但不努力一定不能成功”，明明说的是必要条件，硬要说我讲的是充分条件。有谁敢说找到了成功的充分条件，且具有可操作性？那成功都可以流水线批量生产了。当然这里有个目标定义的问题，什么是成功？升职加薪就是成功？不一定，每个人的目标都不一样，有的人还觉得过安逸的日子就是成功，这里就不赘言了。</p>
<h4 id="质疑2：反对加班反对加班反对加班-升职加薪有那么重要-命都不要了？"><a class="header-anchor" href="#质疑2：反对加班反对加班反对加班-升职加薪有那么重要-命都不要了？">¶</a>质疑2：反对加班反对加班反对加班！升职加薪有那么重要，命都不要了？</h4>
<p>反对有效。我跟你一样反对，所谓的996、80小时、90小时，真的只是打比方。熬夜真的不好，12点前睡觉对程序猿来说真的太重要。早睡早起，坚持锻炼，这是程序猿必须牢记的，这十年里我庆幸自己一直坚持在打球，从未放弃。</p>
<p>但是！我们可以在不熬夜、尽量不伤害身体的情况之下比别人更加努力，别人打游戏，看电影，看网络小说的时间，你可以用来看书、编码和参加技术交流，然后按时睡觉。笨鸟先飞、天道酬勤，这难道不应该是绝大多数非清华北大学生，绝大多数自认为起点不高的人，绝大多数没有背景的人，应该相信和坚持的价值观吗？</p>
<h4 id="质疑3：天赋比努力更重要-没有天赋不要干程序猿这一行"><a class="header-anchor" href="#质疑3：天赋比努力更重要-没有天赋不要干程序猿这一行">¶</a>质疑3：天赋比努力更重要，没有天赋不要干程序猿这一行。</h4>
<p>我想举NBA的两个顶级球员来作为例子，麦迪和科比。天赋来看，麦迪天赋大大超过科比（臂展身高弹跳手掌大小），从努力程度来看，显然科比大大超过麦迪，最后谁的成就更高？当然你又可以扯队友、运气、伤病，等等。所以成功从来都不会有一个确定的公式，每个变量的权重大小早已明确，这是不可能的。詹姆斯、奥尼尔的成就里面天赋起很大作用，科比、AI、斯托克顿、纳什、库里更多的是靠勤奋的训练。</p>
<p>但最直接的反击是，给定一个人，他能不断提升自己的天赋吗？显然不能。要么努力，要么换行。纠结于那些我们无法改变的事情上面是没有意义的。鸡汤有云：努力改变那些我们能够改变的，接受那些无法改变的。我经常告诫自己：要么忍，要么狠，要么滚。</p>
<p>天赋决定了你的上限，勤奋决定了你的下限。你的上限可能比别人低，但你还是可以不断提升自己。</p>
<h4 id="质疑4：你这是资本家的嘴脸-给大家洗脑-让大家做无脑员工-只知道埋头苦干被剥削"><a class="header-anchor" href="#质疑4：你这是资本家的嘴脸-给大家洗脑-让大家做无脑员工-只知道埋头苦干被剥削">¶</a>质疑4：你这是资本家的嘴脸，给大家洗脑，让大家做无脑员工，只知道埋头苦干被剥削。</h4>
<p>我的回答是：哈哈哈哈，真乐。被害妄想症，不要放弃治疗。鸡汤有毒你别喝就是。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Jenkins持续集成</title>
    <url>/2019/04/02/JenkinsContinuous/</url>
    <content><![CDATA[<p>Jenkins是一个非常好用的工具，我们可以用它来帮我们做很多事，如：自动构建、发布测试、持续集成、邮件通知等等很多很多，真是开发者的一个得力帮手。很多同学还不会使用，本文将从零开始，带你半小时上手，轻松搞定繁琐的配置。</p>
<span id="more"></span>
<h3 id="1-安装"><a class="header-anchor" href="#1-安装">¶</a>1.安装</h3>
<p>Jenkins有很多安装方式，通常windows我们使用msi安装包，linux下则使用rpm</p>
<p><strong>windows</strong>:傻瓜式操作，不叙述了。通常我们都在自己电脑上用，安装完成直接到启动Jenkins</p>
<p><strong>linux</strong>：</p>
<p><strong>1.1安装</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">上传文件</span><br><span class="line">rpm -ivh jenkins-xxx<span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>1.2配置Jenkins</strong></p>
<p>返回根目录，用find / -name jenkins搜索jenkins相关目录 如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>sysconfig/jenkins</span><br><span class="line"><span class="regexp">/etc/</span>rc.d<span class="regexp">/init.d/</span>jenkins</span><br><span class="line"><span class="regexp">/etc/</span>logrotate.d/jenkins</span><br><span class="line"><span class="regexp">/var/</span>lib/jenkins</span><br><span class="line"><span class="regexp">/var/</span>log/jenkins</span><br><span class="line"><span class="regexp">/var/</span>cache/jenkins</span><br><span class="line"><span class="regexp">/usr/</span>lib/jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置jdk，在candidates后面加上自己的jdk路径，如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>rc.d<span class="regexp">/init.d/</span>jenkins</span><br></pre></td></tr></table></figure>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">candidates=&quot;</span><br><span class="line">/etc/alternatives/java</span><br><span class="line">/usr/lib/jvm/java<span class="string">-1</span>.8.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre<span class="string">-1</span>.8.0/bin/java</span><br><span class="line">/usr/lib/jvm/java<span class="string">-1</span>.7.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre<span class="string">-1</span>.7.0/bin/java</span><br><span class="line">/usr/bin/java</span><br><span class="line">/usr/local/java/jdk1.8.0_181/bin/java</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>
<p><strong>1.3 修改端口</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig/jenkins</span><br></pre></td></tr></table></figure>
<p><strong>1.4 启动Jenkins</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service jenkins <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<p>问题1： 启动时，可能出现端口错误，Jenkins的默认端口是8080，检查是否有其他程序，例如Tomcat是否占用8080端口</p>
<p>问题2： 出现以下提示，执行命令，重新加载即可：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br></pre></td></tr></table></figure>
<h3 id="2-启动jenkins"><a class="header-anchor" href="#2-启动jenkins">¶</a>2.启动Jenkins</h3>
<p>启动成功后会让你输入默认密码，有文件位置，打开就能看到，一般默认插件都装上，设置一个管理员帐号。重新登录就安装完成了。</p>
<h3 id="3-新建任务"><a class="header-anchor" href="#3-新建任务">¶</a>3.新建任务</h3>
<p>这里以新建maven项目做示例，一开始是没办法建maven项目的，我们要先安装插件</p>
<h5 id="3-1-安装插件"><a class="header-anchor" href="#3-1-安装插件">¶</a>3.1 安装插件</h5>
<p>我们要用到的插件（有些可能默认已经安装）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Maven Integration plugin <span class="regexp">//m</span>aven</span><br><span class="line">Publish Over SSH <span class="regexp">//</span>重要，ssh</span><br><span class="line"><span class="comment">#下面可选</span></span><br><span class="line">Subversion Plug-<span class="keyword">in</span> <span class="regexp">//</span>svn</span><br><span class="line">Git plugin <span class="regexp">//gi</span>t</span><br><span class="line">ThinBackup <span class="regexp">//</span>备份用</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="3-2-新建任务"><a class="header-anchor" href="#3-2-新建任务">¶</a>3.2 新建任务</h5>
<p>主页点击“新建”<br>
项目类型：输入项目名称 <code>demo</code>，类型选择“构建一个Maven项目”(如果没有此项可选，请检查插件“Maven Integration plugin”是否已安装)；</p>
<h5 id="3-3-配置任务"><a class="header-anchor" href="#3-3-配置任务">¶</a><strong>3.3 配置任务</strong></h5>
<h6 id="1-配置源码-一般没问题"><a class="header-anchor" href="#1-配置源码-一般没问题">¶</a>1.配置源码，一般没问题</h6>
<h6 id="2-配置定时构建"><a class="header-anchor" href="#2-配置定时构建">¶</a>2.配置定时构建</h6>
<p>定时构建或者轮询构建（源码提交定期检测），一般我们选前者</p>
<p>“日程表”格式与 crontab 相似但有细微差别，示例如下：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 每行由 <span class="number">5</span> 个值组成(空格或TAB分隔)，分别表示分(<span class="number">0</span><span class="number">-59</span>)、时(<span class="number">0</span><span class="number">-23</span>)、日(<span class="number">1</span><span class="number">-31</span>)、月(<span class="number">1</span><span class="number">-12</span>)、周(<span class="number">0</span><span class="number">-7</span>, <span class="number">0</span>/<span class="number">7</span>=周日)</span><br><span class="line">## <span class="string">&quot;M,N&quot;</span> 表示M和N；<span class="string">&quot;M-N&quot;</span> 表示范围[M,N]；<span class="string">&quot;M-N/X&quot;</span> 表示范围[M,N]内每隔X；<span class="string">&quot;*/X&quot;</span> 表示整个范围内每隔X</span><br><span class="line">## 前面提到的M/N/X的值都可以用H(意为Hash)代替，散列值起到随机值的效果，且同一项目取值稳定，这对于项目多时分散压力很有用。</span><br><span class="line">H/<span class="number">10</span>  H(<span class="number">0</span><span class="number">-8</span>)  *  *  <span class="number">1</span><span class="number">-5</span>   ## 触发时间: 工作日、Hour为<span class="number">0</span>~<span class="number">8</span>按哈希随机、Minute以<span class="number">10</span>为间隔</span><br><span class="line">H/<span class="number">10</span>  H       *  *  <span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span> ## 触发时间: 周末、Hour为全天按哈希随机、Minute以<span class="number">10</span>为间隔</span><br><span class="line">## “日程表”修改后，下方会给出下次执行时间点的预告</span><br><span class="line"></span><br><span class="line">##下面是一些例子</span><br><span class="line"></span><br><span class="line">每天凌晨<span class="number">2</span>:<span class="number">00</span>跑一次 </span><br><span class="line">H <span class="number">2</span>  * * *</span><br><span class="line"></span><br><span class="line">每隔<span class="number">5</span>分钟构建一次</span><br><span class="line">H/<span class="number">5</span> * * * *</span><br><span class="line"></span><br><span class="line">每两小时构建一次</span><br><span class="line">H H/<span class="number">2</span> * * *</span><br><span class="line"></span><br><span class="line">每天中午<span class="number">12</span>点定时构建一次</span><br><span class="line">H <span class="number">12</span> * * *   或<span class="number">0</span> <span class="number">12</span> * * *（<span class="number">0</span>这种写法也被H替代了）</span><br><span class="line"></span><br><span class="line">每天下午<span class="number">18</span>点前定时构建一次</span><br><span class="line">H <span class="number">18</span> * * *</span><br><span class="line"> </span><br><span class="line">每<span class="number">15</span>分钟构建一次</span><br><span class="line">H/<span class="number">15</span> * * * *   或*/<span class="number">5</span> * * * *(这种方式已经被第一种替代了，jenkins也不推荐这种写法了)</span><br><span class="line"> </span><br><span class="line">周六到周日，<span class="number">18</span>点<span class="number">-23</span>点，三小时构建一次</span><br><span class="line">H <span class="number">18</span><span class="number">-23</span>/<span class="number">3</span> * * <span class="number">6</span><span class="number">-7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="3-build"><a class="header-anchor" href="#3-build">¶</a>3.Build</h6>
<p>输入Root POM和Goals and options，如<code>pom.xml</code>和<code>clean install</code></p>
<h6 id="4-构建后操作"><a class="header-anchor" href="#4-构建后操作">¶</a>4.构建后操作</h6>
<p>选择Send build artifacts over SSH(要提前去设置好ssh服务器，设置好可以点击测试)</p>
<p>填写SSH服务器相关配置</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Name:选择服务器</span><br><span class="line"><span class="keyword">Source</span> files:要上传的文件，这里我只要上传jar，填`xxx<span class="regexp">/target/</span>*.jar`</span><br><span class="line">Remote directory: 远程文件夹位置，最好先新建好，否则可能报错，如`<span class="regexp">/home/</span>jenkins/demo`</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>Exec command</code>:执行命令,注意的是sh脚本要写上jdk环境变量，因为Jenkins的线程马上就会被服务器杀死而无法获取环境变量</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /home/<span class="keyword">test</span>/</span><br><span class="line"><span class="keyword">sh</span> <span class="keyword">app</span>.<span class="keyword">sh</span> stop</span><br><span class="line"><span class="keyword">rm</span> -rf *.jar logs/</span><br><span class="line">cp -r /home/jenkins/<span class="keyword">test</span><span class="comment">/*.jar ./</span></span><br><span class="line"><span class="comment">sh app.sh start</span></span><br></pre></td></tr></table></figure>
<p><code>app.sh</code>顶部写法，记得<code>chmod +x app.sh</code>赋予执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_181</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>点击高级，勾上<code>Flatten files</code>,这样不会创建没用的目录</p>
<p>附上<code>tomcat</code>启动脚本示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.7.0_79</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">TOMCAT_HOME=`/usr/local/tomcat/consumer/tomcat-8080`</span><br><span class="line">SHUTDOWN=<span class="variable">$TOMCAT_HOME</span>/bin/shutdown.sh</span><br><span class="line">STARTTOMCAT=<span class="variable">$TOMCAT_HOME</span>/bin/startup.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;关闭<span class="variable">$TOMCAT_HOME</span>&quot;</span></span><br><span class="line"><span class="variable">$SHUTDOWN</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">PIDS=`ps -ef |grep <span class="variable">$TOMCAT_HOME</span> |grep -v <span class="string">&#x27;grep&#x27;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PIDS</span>&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;STOP SUCCESS!&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">	<span class="built_in">kill</span> -9 <span class="variable">$PIDS</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;KILLED PID: <span class="variable">$PIDS</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#if you need to remove logs</span></span><br><span class="line"><span class="comment">#rm -rf $TOMCAT_HOME/logs/* </span></span><br><span class="line"><span class="comment">#if you need to remove works</span></span><br><span class="line"><span class="comment">#rm -rf $TOMCAT_HOME/wrok/*</span></span><br><span class="line"><span class="comment">#remove old war</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$TOMCAT_HOME</span>/webapps/*</span><br><span class="line"><span class="comment">#cp your war file</span></span><br><span class="line"><span class="built_in">cp</span> -r /home/jenkins/demo/*.war <span class="variable">$TOMCAT_HOME</span>/webapps/</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start <span class="variable">$TOMCAT_HOME</span>&quot;</span></span><br><span class="line"><span class="variable">$STARTTOMCAT</span></span><br><span class="line">PIDS=`ps -ef |grep <span class="variable">$TOMCAT_HOME</span> |grep -v <span class="string">&#x27;grep&#x27;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;STARTED PID: <span class="variable">$PIDS</span>&quot;</span></span><br><span class="line"><span class="comment">#tail -f $TOMCAT_HOME/logs/catalina.out</span></span><br></pre></td></tr></table></figure>
<p>授人以鱼不如授人以渔，希望小伙伴们能举一反三！</p>
<h6 id="5-tags标签用法"><a class="header-anchor" href="#5-tags标签用法">¶</a>5.tags标签用法</h6>
<p>因为少数人会用到，所以放在后面</p>
<p><strong>svn用法</strong></p>
<ul>
<li>
<p>在常规设置出勾选参数化构建过程</p>
</li>
<li>
<p>选择List Subversion tags</p>
</li>
<li>
<p>Name输入<code>SVN_TAG</code></p>
</li>
<li>
<p>Repository URL输入tags地址，如<code>https://192.168.0.xx/svn/test/tags</code></p>
</li>
<li>
<p>选择帐号密码</p>
</li>
<li>
<p>勾选Sort newest first</p>
</li>
<li>
<p>源码管理中Subversion的URl改成<code>https://192.168.0.xx/svn/test/tags/$SVN_TAG</code></p>
</li>
</ul>
<p><strong>git用法相对简单</strong></p>
<ul>
<li>安装<code>git-parameter</code>插件</li>
<li>参数化构建选择Git Parameter</li>
<li>Name输入<code>tag</code>,Default Value输入<code>origin/master</code>或者不填</li>
<li>源码管理中Git的Branch Specifier值填<code>$&#123;tag&#125;</code>，与上面对应</li>
</ul>
<h6 id="6-邮件通知"><a class="header-anchor" href="#6-邮件通知">¶</a>6.邮件通知</h6>
<ol>
<li>
<p>安装插件Email Extension Plugin（最新版本可能默认集成）</p>
</li>
<li>
<p>进到系统管理-&gt;系统设置</p>
<p>Jenkins URL：jenkins根据这个URL在邮件中显示图片及链接，如一些构建日志，构建任务的工作区间等等可通过该链接访问</p>
</li>
<li>
<p>同样在系统设置中，配置Extended E-mail Notification：</p>
<p>Default Content Type：邮件内容格式，可选Plain text和HTML。</p>
<p>Default Recipients：默认的收件人列表，用逗号分隔。抄送或密送某个收件人可以在其邮箱前面加上cc:或bcc:。</p>
<p>Default Subject：默认的邮件标题。【构建通知】：$PROJECT_NAME - $BUILD_STATUS - Build # $BUILD_NUMBER!</p>
<p>Default Content：默认的邮件内容。这里提供一个模板</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$</span><span class="template-variable">&#123;ENV, var=&quot;JOB_NAME&quot;&#125;</span><span class="language-xml">-第$</span><span class="template-variable">&#123;BUILD_NUMBER&#125;</span><span class="language-xml">次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">topmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;4&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $</span><span class="template-variable">&#123;PROJECT_NAME&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$</span><span class="template-variable">&#123;BUILD_NUMBER&#125;</span><span class="language-xml">次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>SVN 版本： $</span><span class="template-variable">&#123;SVN_REVISION&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $</span><span class="template-variable">&#123;CAUSE&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="language-xml"><span class="tag"><span class="string">console&quot;</span>&gt;</span>$</span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="language-xml">console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>$</span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="language-xml"><span class="tag"><span class="string">ws&quot;</span>&gt;</span>$</span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="language-xml">ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>$</span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>变更集<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;</span><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       </span></span><br><span class="line"><span class="language-xml">       </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>
<p>Enable Debug Mode：开启插件的Debug模式，在日志里能看到更多信息。</p>
<p>其他配置保持默认即可。</p>
<p>这里的Default Content Type笔者选择了HTML，因为可以显示更为好看丰富的邮件内容，另外邮件内容中用到了一些Jenkins的内置变量，有兴趣的童鞋可以自行百度。</p>
</li>
<li>
<p>在构建后添加<code>Editable Email Notification</code>，填好相关的内容，要注意需要添加<code>Triggers</code>，没有添加Triggers就不会发送通知邮件出来，这是一个触发条件。主要添加的Triggers有三类：Failure-Any，Success，Unstable (Test Failures)，分别对应构建失败，构建成功，构建不稳定时触发发送邮件通知。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonar快速入门</title>
    <url>/2019/04/10/LearnSonarFast/</url>
    <content><![CDATA[<p>SonarQube 是一个用于管理源代码质量开放平台，它可以从多个维度检测代码质量，可以快速的定位代码中潜在的或者明显的 Bug、错误。它支持包括 Java、Python、Php、C/C++、C#、HTML、JavaScript、PL/SQL、Objective C 等二十多种编程语言的代码质量管理与检测。可作为我们日常开发中检测代码质量的重要工具。很多同学还不会使用，本文将从零开始，带你半小时上手，轻松搞定繁琐的配置。</p>
<span id="more"></span>
<h2 id="sonarqube"><a class="header-anchor" href="#sonarqube">¶</a>sonarqube</h2>
<h3 id="下载"><a class="header-anchor" href="#下载">¶</a>下载</h3>
<p><a href="https://www.sonarqube.org/">官网下载</a></p>
<h3 id="sonarqube配置"><a class="header-anchor" href="#sonarqube配置">¶</a>sonarqube配置</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">sonar.jdbc.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/sonar?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=<span class="literal">true</span>&amp;useConfigs=maxPerformance&amp;useSSL=<span class="literal">false</span></span><br><span class="line"><span class="attr">sonar.jdbc.username</span>=root</span><br><span class="line"><span class="attr">sonar.jdbc.password</span>=root</span><br><span class="line"><span class="attr">sonar.sorceEncoding</span>=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">sonar.login</span>=admin</span><br><span class="line"><span class="attr">sonar.password</span>=admin</span><br></pre></td></tr></table></figure>
<h3 id="安装插件"><a class="header-anchor" href="#安装插件">¶</a>安装插件</h3>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chinese pack</span></span><br><span class="line"><span class="attribute">checkstyle</span></span><br><span class="line"><span class="attribute">pdm</span></span><br><span class="line"><span class="attribute">findbugs</span></span><br></pre></td></tr></table></figure>
<h2 id="sonar-scanner"><a class="header-anchor" href="#sonar-scanner">¶</a>sonar-scanner</h2>
<h3 id="下载-v2"><a class="header-anchor" href="#下载-v2">¶</a>下载</h3>
<p><a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner">官网下载</a></p>
<h3 id="设置环境变量"><a class="header-anchor" href="#设置环境变量">¶</a>设置环境变量</h3>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">SONAR_SCANNER</span>=F:\sonar-scanner</span><br><span class="line"><span class="attr">Path</span>=%SONAR_SCANNER%\bin</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置">¶</a>配置</h3>
<p>打开<code>conf/sonar-scanner.properties</code></p>
<p>一般默认值就行,如果不在同一个机器配置<code>sonar.host.url</code>，即<code>sonarqube</code>的访问地址</p>
<h3 id="sonnar-scanner代码检查"><a class="header-anchor" href="#sonnar-scanner代码检查">¶</a>sonnar-scanner代码检查</h3>
<h5 id="1-maven配置-推荐"><a class="header-anchor" href="#1-maven配置-推荐">¶</a>1. maven配置（推荐）</h5>
<p>只需要在全局maven配置中加入以下参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.sonarsource.scanner.maven<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Optional URL to server. Default value is http://localhost:9000 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sonar.host.url</span>&gt;</span></span><br><span class="line">                  http://myserver:9000</span><br><span class="line">                <span class="tag">&lt;/<span class="name">sonar.host.url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>执行命令</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> clean verify sonar:sonar</span><br><span class="line">  </span><br><span class="line"><span class="comment"># In some situation you may want to run sonar:sonar goal as a dedicated step. Be sure to use install as first step for multi-module projects</span></span><br><span class="line"><span class="keyword">mvn</span> clean install</span><br><span class="line"><span class="keyword">mvn</span> sonar:sonar</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Specify the version of sonar-maven-plugin instead of using the latest. See also &#x27;How to Fix Version of Maven Plugin&#x27; below.</span></span><br><span class="line"><span class="keyword">mvn</span> org.sonarsource.scanner.maven:sonar-maven-plugin:<span class="number">3</span>.<span class="number">6</span>.<span class="number">0</span>.<span class="number">1398</span>:sonar</span><br></pre></td></tr></table></figure>
<h5 id="2-项目中配置"><a class="header-anchor" href="#2-项目中配置">¶</a>2. 项目中配置</h5>
<p>这个比较复杂，建议多看<a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner">文档</a><br>
下面是<code>ruoyi</code>多模块设置示例</p>
<p>ruoyi项目根目录新建文件<code>sonar-project.properties</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must be unique in a given SonarQube instance</span></span><br><span class="line"><span class="attr">sonar.projectKey</span>=ruoyi</span><br><span class="line"><span class="comment"># this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.</span></span><br><span class="line"><span class="attr">sonar.projectName</span>=ruoyi</span><br><span class="line"><span class="attr">sonar.projectVersion</span>=<span class="number">1.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.</span></span><br><span class="line"><span class="comment"># This property is optional if sonar.modules is set. </span></span><br><span class="line"><span class="comment">#sonar.sources=.</span></span><br><span class="line"><span class="comment">#sonar.sources=src</span></span><br><span class="line"><span class="attr">sonar.sources</span>=src/main/java</span><br><span class="line"><span class="attr">sonar.java.binaries</span>=target/</span><br><span class="line"><span class="attr">sonar.language</span>=java</span><br><span class="line"><span class="attr">sonar.modules</span>=ruoyi-admin,ruoyi-common,ruoyi-framework,ruoyi-system,ruoyi-app,ruoyi-generator,ruoyi-quartz</span><br><span class="line"><span class="comment"># Encoding of the source code. Default is default system encoding</span></span><br><span class="line"><span class="comment">#sonar.sourceEncoding=UTF-8</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Sonar</tag>
      </tags>
  </entry>
  <entry>
    <title>从数据库读取网站配置</title>
    <url>/2017/05/09/ReadSiteConfigurationFromDatabase/</url>
    <content><![CDATA[<p>近期遇到一个算是比较少见的需求，有点搞脑子，如果你也有类似的疑问，那么可以看看这篇文章。需求如下：</p>
<ul>
<li>要经常改变网站的一些配置</li>
<li>这些配置除了显示也没什么用</li>
<li>通常可能会在全局使用</li>
<li>或许是一些分布式的配置</li>
<li>需要将配置存放在数据库</li>
</ul>
<p><strong>如果你的问题满足上述所述需求全部或者部分，不防阅读一下以下解决策略</strong></p>
<span id="more"></span>
<p>因为以前的策略是把配置内容放在<code>resources</code> 下的<code>*.properties</code> 里面，而且为了省资源，在启动的时候把配置内容都加载到内存里，如果需求合理确实也没什么缺陷，但是最近运营推广上面有投放广告的需求，第三方推广公司对公司审核（某日头条、X60推广等），需要频繁修改网站名和公司名，这使得运维小哥非常恼火，而且重启容器确实不是一个很好的方案。那么，问题来了，这个锅我们服务端得背啊，额……不是，是身先士卒，能者多劳。经过一天的苦思冥想，大概有了下列几个方案：</p>
<ol>
<li>放在数据库，加载到缓存，再加载到内存，刷新内存是一个问题</li>
<li>放在数据库，加载到缓存，不加载到内存，大量的修改和使用，工程量浩大</li>
<li>动态修改配置文件，需重启或更换读取方式</li>
<li>上下文监听器，可选重启，或者每个链接都刷新（缺点是所有请求都会触发，如图片）</li>
<li>文件监听器，需运维修改</li>
<li>……</li>
</ol>
<p>上述方案中，或多或少存在一些问题，和目前需求上也不是完全吻合，自然都被pass掉了。最终整理代码，还是想到了一个比较适合目前也可解决未来存在的潜在需求的方案，废话不多少，上方案。</p>
<ol>
<li>把配置文件放到数据库中，可支持分布式读取</li>
<li>业务层和数据层增加缓存，减少数据库访问</li>
<li>读取配置加载到内存，并设置过期时间</li>
<li>JSP中导入工具类，读取就好了</li>
</ol>
<p>那么问题又来了，工具类是静态的，如果业务层也是分布式，如dubbo等，配置从Service读取，存在一定的麻烦，好在之前就已经遇到过了，前面的文章里也讲过如何处理，看具体代码：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 读取配置，放入值内存中 */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; siteMap    = Maps.<span class="property">newHashMap</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 读取配置，放入读取时间到内存中 */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;<span class="built_in">String</span>, Long&gt;   timeMap    = Maps.<span class="property">newHashMap</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 超时毫秒数*/</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span>                EXPRE_TIME = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">   @Autowired</span><br><span class="line">   <span class="keyword">private</span> SiteConfigService                siteConfigService;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SiteConfig                siteConfig;</span><br><span class="line"></span><br><span class="line">   @PostConstruct</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span>()</span><br><span class="line">   &#123;</span><br><span class="line">       siteConfig = <span class="variable">this</span>;</span><br><span class="line">       siteConfig.<span class="property">siteConfigService</span> = <span class="variable">this</span>.<span class="property">siteConfigService</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据关键词读取配置</span></span><br><span class="line"><span class="comment">    * @param key 关键词</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="title function_">read</span>(<span class="built_in">String</span> <span class="built_in">key</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       Long time = timeMap.<span class="property">get</span>(<span class="built_in">key</span>);</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == time || <span class="title function_">expre</span>(time))</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">// 刷新</span></span><br><span class="line">           SiteConfigModel config = siteConfig.<span class="property">siteConfigService</span>.<span class="property">findByKey</span>(<span class="built_in">key</span>);</span><br><span class="line">           <span class="keyword">if</span> (<span class="literal">null</span> != config)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">String</span> value = config.<span class="property">getValue</span>();</span><br><span class="line">               logger.<span class="property">info</span>(<span class="string">&quot;读取了配置:&quot;</span> + <span class="built_in">key</span> + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">               siteMap.<span class="property">put</span>(<span class="built_in">key</span>, value);</span><br><span class="line">               timeMap.<span class="property">put</span>(<span class="built_in">key</span>, System.<span class="property">currentTimeMillis</span>());</span><br><span class="line">               <span class="keyword">return</span> value;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> siteMap.<span class="property">get</span>(<span class="built_in">key</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断是否过期</span></span><br><span class="line"><span class="comment">    * @param time 加入map的时间戳</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">expre</span>(<span class="type">long</span> time)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (System.<span class="property">currentTimeMillis</span>() - time &gt; EXPRE_TIME)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>前端使用就不讲了，再也不用要求改这改那的，你们爱改啥改啥，有时候，创新只是来源于偷懒！</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 单参数不加@Param 报没有getter</title>
    <url>/2020/03/11/MybatisSingleParamNoGetter/</url>
    <content><![CDATA[<p><code>There is no getter for property named '*' in 'class java.lang.String'</code>，此错误之所以出现，是因为mybatis在对<code>parameterType=&quot;String&quot;</code>的sql语句做了限制，假如你使用<code>&lt;if test=&quot;username != null&quot;&gt;</code>或<code>&lt;when test=&quot;username != null&quot;&gt;</code>这样的条件判断时，就会出现该错误，不过今天我们来刨根问底一下。</p>
<span id="more"></span>
<h2 id="一-错误再现"><a class="header-anchor" href="#一-错误再现">¶</a>一、错误再现</h2>
<p>想要追本溯源，就需要错误再现，那么假设我们有这样一个sql查询：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getObj&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectVo&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			and username = #</span><span class="template-variable">&#123;username&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>parameterType=&quot;String&quot;</code>，这一点是必须得，参数类型必须是string。</li>
<li>该sql对应的mapper class中对应的方法为<code>getObj(String username)</code>，也就是说，传递的参数名为<code>username</code>，正常情况下，这样的配置合情合理。</li>
<li><code>&lt;if test=&quot;username != null&quot;&gt;</code>，你有一个对应的<code>test</code>判断语句，也可能是<code>when</code>。</li>
<li>那么这个时候，项目运行该查询语句时，就会抛出<code>There is no getter for property named 'username' in 'class java.lang.String'</code>错误！</li>
</ol>
<h2 id="二-解决办法"><a class="header-anchor" href="#二-解决办法">¶</a>二、解决办法</h2>
<p>当然了，如果你没有时间来看源码分析实例的话，我想先告诉你解决办法，免得你被问题困扰。解决办法很简单，你只需要把 <code>&lt;if test=&quot;username != null&quot;&gt;</code>修改为 <code>&lt;if test=&quot;_parameter!= null&quot;&gt;</code>就好了，其他地方不需要改动（也就是说<code>and username = #&#123;username&#125;</code>不需要改动为<code>and username = #&#123;_parameter&#125;</code>），修改后的sql语句如下：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getObj&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectVo&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_parameter != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			and username = #</span><span class="template-variable">&#123;username&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="三-源码分析"><a class="header-anchor" href="#三-源码分析">¶</a>三、源码分析</h2>
<p>用maven下载源码，定位 <code>org.apache.ibatis.session.defaults.DefaultSqlSession</code>L 145上下方法名<code>selectList(String statement, Object parameter, RowBounds rowBounds)</code><br>
代码展示：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public &lt;E&gt; List&lt;E&gt; select<span class="constructor">List(String <span class="params">statement</span>, Object <span class="params">parameter</span>, RowBounds <span class="params">rowBounds</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    MappedStatement ms = configuration.get<span class="constructor">MappedStatement(<span class="params">statement</span>)</span>;</span><br><span class="line">    return executor.query(ms, wrap<span class="constructor">Collection(<span class="params">parameter</span>)</span>, rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">  &#125; catch (Exception e) &#123;</span><br><span class="line">    throw <span class="module-access"><span class="module"><span class="identifier">ExceptionFactory</span>.</span></span>wrap<span class="constructor">Exception(<span class="string">&quot;Error querying database.  Cause: &quot;</span> + <span class="params">e</span>, <span class="params">e</span>)</span>;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ErrorContext</span>.</span></span>instance<span class="literal">()</span>.reset<span class="literal">()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>断点可以看到Exception的内容为开头报的错</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.mybatis</span><span class="selector-class">.spring</span><span class="selector-class">.MyBatisSystemException</span>: nested exception is org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.reflection</span><span class="selector-class">.ReflectionException</span>: There is no getter <span class="keyword">for</span> property named <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;class java.lang.String&#x27;</span></span><br></pre></td></tr></table></figure>
<p>原因就是此时变量是没有绑定的，也就是没有变量为<code>username</code>的东西，只有两个内置对象<code>_parameter</code>, <code>_databaseId</code></p>
<p>其实这里你可以发现，取值也根本用不到<code>#&#123;username&#125;</code>,随便用个变量就能拿到<code>#&#123;value&#125;</code></p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>mapper</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring自定义扫描注解</title>
    <url>/2016/08/23/SpringCustomScanAnnotation/</url>
    <content><![CDATA[<p>最近在做一个项目,首先是因为要在普通静态类里面调用Service,因为Service是Dubbo提供者的类,只能通过注解来调用.</p>
<span id="more"></span>
<p>那么问题来了,该怎么调用Service呢?</p>
<h3 id="静态类调用service"><a class="header-anchor" href="#静态类调用service">¶</a>静态类调用Service</h3>
<p>一般需要在一个工具类中使用@Autowired 注解注入一个service。但是由于工具类方法一般都写成static，所以直接注入就存在问题。可以这样解决:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUtils</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="title class_">Logger</span> logger = <span class="title class_">LoggerFactory</span>.<span class="title function_">getLogger</span>(<span class="title class_">OpeLogUtils</span>.<span class="property">class</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">TestService</span> testService;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="title class_">TestUtils</span> testUtils ;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setUserInfo</span>(<span class="params">TestUtils testUtils </span>) &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">testUtils</span> = testUtils ;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@PostConstruct</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        testUtils = <span class="variable language_">this</span>;  </span><br><span class="line">        testUtils.<span class="property">testService</span>= <span class="variable language_">this</span>.<span class="property">testService</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>@PostConstruct  是spring标签,相当于在配置文件声明注入</p>
<h3 id="如何让spring扫描该静态类"><a class="header-anchor" href="#如何让spring扫描该静态类">¶</a>如何让Spring扫描该静态类</h3>
<p>这样通过<code>testUtils.testService</code>调用即可.那么问题来,这样做了以后你会发现spring依旧不加载testService,声明没有执行,<br>
这里别忘记在上面的代码中声明一个Spring注解,如<code>@Component</code>可能有的同学到这一步是成功,因为你可能是默认配置,默认配置是扫描base-package下所有的注解,这样性能肯定不好,勤学苦练,苦思冥想,终于让我找到配置起来比较高逼格的做法,话不多说,上代码:</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="comment">--  自动扫描，完成bean的创建和依赖注入 --&gt;</span></span><br><span class="line">	&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.example&quot;</span> <span class="keyword">use</span>-<span class="keyword">default</span>-filters=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">		&lt;<span class="keyword">context</span>:include-filter <span class="keyword">type</span>=<span class="string">&quot;annotation&quot;</span> expression=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span><br><span class="line">		&lt;<span class="keyword">context</span>:include-filter <span class="keyword">type</span>=<span class="string">&quot;annotation&quot;</span> expression=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span> /&gt;</span><br><span class="line">	&lt;<span class="keyword">context</span>:exclude-filter <span class="keyword">type</span>=<span class="string">&quot;annotation&quot;</span> expression=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span> /&gt; 	</span><br><span class="line">		&lt;<span class="keyword">context</span>:exclude-filter <span class="keyword">type</span>=<span class="string">&quot;regex&quot;</span> expression=<span class="string">&quot;com.example.controller&quot;</span>/&gt;</span><br><span class="line">		&lt;<span class="keyword">context</span>:exclude-filter <span class="keyword">type</span>=<span class="string">&quot;regex&quot;</span> expression=<span class="string">&quot;com.example.service&quot;</span>/&gt;</span><br><span class="line">	&lt;/<span class="keyword">context</span>:<span class="keyword">component</span>-scan&gt;</span><br></pre></td></tr></table></figure>
<p>稍微解释下,在xml配置了<code>&lt;context:component-scan&gt;</code>这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，如果扫描到有<code>@Component @Controller@Service</code>等这些注解的类，则把这些类注册为bean<br>
注意：如果配置了<code>&lt;context:component-scan&gt;</code>那么<code>&lt;context:annotation-config/&gt;</code>标签就可以不用再xml中配置了，因为前者包含了后者。另外<code>&lt;context:annotation-config/&gt;</code>还提供了两个子标签 <code>&lt;context:include-filter&gt;</code> 和<code>&lt;context:exclude-filter&gt;</code>在说明这两个子标签前，先说一下<code>&lt;context:component-scan&gt;</code>有一个use-default-filters属性，改属性默认为true,这就意味着会扫描指定包下的全部的标有<code>@Component</code>的类，并注册成bean.也就是<code>@Component</code>的子注解<code>@Service,@Reposity</code>等。所以如果仅仅是在配置文件中这么写</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.example&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p><code>use-default-filter</code>此时为true那么会对base-package包或者子包下的所有的进行java类进行扫描,并把匹配的java类注册成bean。</p>
<p>可以发现这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller，该怎么办？此时子标签<code>&lt;context:incluce-filter&gt;</code>就起到了勇武之地。如下所示</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.example.controller&quot;</span>&gt;  </span><br><span class="line">	&lt;<span class="keyword">context</span>:include-filter <span class="keyword">type</span>=<span class="string">&quot;annotation&quot;</span> expression=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;   </span><br><span class="line">&lt;/<span class="keyword">context</span>:<span class="keyword">component</span>-scan&gt;  </span><br></pre></td></tr></table></figure>
<p>这样就会只扫描base-package指定下的有<code>@Controller</code>下的java类，并注册成bean<br>
但是因为<code>use-dafault-filte</code>r在上面并没有指定，默认就为true，所以当把上面的配置改成如下所示的时候，就会产生与你期望相悖的结果（注意base-package包值得变化）</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.example.controller&quot;</span>&gt;  </span><br><span class="line">	&lt;<span class="keyword">context</span>:include-filter <span class="keyword">type</span>=<span class="string">&quot;annotation&quot;</span> expression=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;   </span><br><span class="line">&lt;/<span class="keyword">context</span>:<span class="keyword">component</span>-scan&gt;  </span><br></pre></td></tr></table></figure>
<p>此时，spring不仅扫描了<code>@Controller</code>，还扫描了指定包所在的子包service包下注解<code>@Service</code>的java类<br>
此时指定的include-filter没有起到作用，只要把use-default-filter设置成false就可以了。这样就可以避免在base-packeage配置多个包名这种不是很优雅的方法来解决这个问题了。<br>
另外在我参与的项目中可以发现在base-package指定的包中有的子包是不含有注解了，所以不用扫描，此时可以指定<code>&lt;context:exclude-filter&gt;</code>来进行过滤，说明此包不需要被扫描。综合以上说明<br>
Use-dafault-filters=”false”的情况下：<code>&lt;context:exclude-filter&gt;</code>指定的不扫描，<code>&lt;context:include-filter&gt;</code>指定的扫描这个配置文件中必须声明xmlns:context 这个xml命名空间，在schemaLocation中需要指定schema：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.springframework.org<span class="regexp">/schema/</span>context</span><br><span class="line">http:<span class="regexp">//</span>www.springframework.org<span class="regexp">/schema/</span>context/spring-context-<span class="number">3.0</span>.xsd</span><br></pre></td></tr></table></figure>
<p>这个文件中beans根节点下只有一个context:component-scan节点，此节点有两个属性base-package属性告诉spring要扫描的包，use-default-filters=&quot;false&quot;表示不要使用默认的过滤器，此处的默认过滤器，会扫描包含Service,Component,Repository,Controller注解修饰的类，而此处我们处于示例的目的，故意将use-default-filters属性设置成了false。</p>
<p>context:component-scan节点允许有两个子节点<code>&lt;context:include-filter&gt;</code>和<code>&lt;context:exclude-filter&gt;</code>。filter标签的type和表达式说明如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Filter Type</th>
<th style="text-align:right">Examples Expression</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">annotation</td>
<td style="text-align:right">org.example.SomeAnnotation</td>
<td style="text-align:center">符合SomeAnnoation的target class</td>
</tr>
<tr>
<td style="text-align:left">assignable</td>
<td style="text-align:right">org.example.SomeClass</td>
<td style="text-align:center">指定class或interface的全名</td>
</tr>
<tr>
<td style="text-align:left">aspectj</td>
<td style="text-align:right">org.example…*Service+</td>
<td style="text-align:center">AspectJ语法</td>
</tr>
<tr>
<td style="text-align:left">regex</td>
<td style="text-align:right">org.example.Default.*</td>
<td style="text-align:center">Regelar Expression</td>
</tr>
<tr>
<td style="text-align:left">custom</td>
<td style="text-align:right">org.example.MyTypeFilter</td>
<td style="text-align:center">Spring3新增自定Type，org.springframework.core.type.TypeFilter</td>
</tr>
</tbody>
</table>
<p>在我们的示例中，将filter的type设置成了正则表达式，regex，注意在正则里面.表示所有字符，而.才表示真正的.字符。我们的正则表示以Dao或者Service结束的类。</p>
<p>我们也可以使用annotaion来限定，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.outofmemory.spring&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里我们指定的include-filter的type是annotation，expression则是注解类的全名。</p>
<p>另外context:conponent-scan节点还有<code>&lt;context:exclude-filter&gt;</code>可以用来指定要排除的类，其用法和include-filter一致。</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot部署https</title>
    <url>/2019/08/29/SpringbootUseHttps/</url>
    <content><![CDATA[<p>很多场景都要求使用<code>https</code>了，但是一般开发都是<code>http</code>环境，改造<code>https</code>有很多方法，这里介绍一种最好用的也是实际生产最多见的一种方式。</p>
<span id="more"></span>
<h3 id="下载ssl证书"><a class="header-anchor" href="#下载ssl证书">¶</a>下载ssl证书</h3>
<p>你需要申请一个<code>ssl</code>证书，证书有很多种，学习的情况下，去阿里云买个免费的就行了，下载适合<code>nginx</code>使用的证书，会得到一个压缩包，里面有2个证书</p>
<h3 id="配置nginx"><a class="header-anchor" href="#配置nginx">¶</a>配置nginx</h3>
<p>得到证书后上传到服务器，放到你想放的位置，在<code>nginx</code>添加相关配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Tomcat 8080端口</span></span><br><span class="line"><span class="section">upstream</span> tomcat_8088&#123;</span><br><span class="line">	<span class="attribute">server</span>    <span class="number">127.0.0.1:8088</span>  weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">#将所有http协议内容重定向到https协议</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> xxx.com;<span class="comment">#你的域名</span></span><br><span class="line">	<span class="attribute">rewrite</span><span class="regexp"> ^</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#https协议</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">	<span class="attribute">server_name</span> xxx.com;<span class="comment">#你的域名</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># letsencrypt生成的文件</span></span><br><span class="line">	<span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">	<span class="attribute">ssl_certificate</span> /usr/local/nginx/cert/xxx.pem;<span class="comment">#你的证书</span></span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> /usr/local/nginx/cert/xxx.key;<span class="comment">#你的证书</span></span><br><span class="line"></span><br><span class="line">	<span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">	<span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">50m</span>;</span><br><span class="line">	<span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">	<span class="comment"># 一般推荐使用的ssl_ciphers值: https://wiki.mozilla.org/Security/Server_Side_TLS</span></span><br><span class="line">	<span class="attribute">ssl_ciphers</span> <span class="string">&#x27;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK&#x27;</span>;</span><br><span class="line">	<span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 代理tomcat</span></span><br><span class="line">	<span class="section">location</span> / &#123;   </span><br><span class="line">		<span class="attribute">proxy_set_header</span>	Host				<span class="variable">$http_host</span>;  			</span><br><span class="line">		<span class="attribute">proxy_set_header</span>	X-Real-IP			<span class="variable">$remote_addr</span>;     </span><br><span class="line">		<span class="attribute">proxy_set_header</span>	X-Forwarded-For		<span class="variable">$proxy_add_x_forwarded_for</span>;     </span><br><span class="line">		<span class="attribute">proxy_set_header</span>	Cookie				<span class="variable">$http_cookie</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span> 	X-Forwarded-Proto 	<span class="variable">$scheme</span>;</span><br><span class="line">		<span class="attribute">proxy_pass</span>			http://tomcat_8088;</span><br><span class="line">		<span class="comment">#proxy_redirect		default;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重定向会出现<code>http</code>的问题必须添加</p>
<blockquote>
<p>proxy_set_header 	X-Forwarded-Proto 	$scheme;</p>
</blockquote>
<h3 id="修改springboot相关配置"><a class="header-anchor" href="#修改springboot相关配置">¶</a>修改springboot相关配置</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 下面2项配置结合nginx防止重定向到http</span></span><br><span class="line">    <span class="attr">use-forward-headers:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tomcat:</span></span><br><span class="line">        <span class="attr">protocol-header:</span> <span class="string">X-Forwarded-Proto</span></span><br></pre></td></tr></table></figure>
<p>是不是很简单的，但是网上的教程一般都很笼统或者根本就不全</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>https</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>前端大杀器 Sublime 3安装和常用插件</title>
    <url>/2016/01/26/Sublime3InstallAndPlugin/</url>
    <content><![CDATA[<p>SublimeText是一款非常精巧的文本编辑器，适合编写代码、做笔记、写文章。它用户界面十分整洁，功能非同凡响，性能快得出奇。这些非常棒的特性 包括任意跳转（Goto Anything）、多重选择（multiple selections）、指令面板（command palette）、免打扰模式（distraction free mode）、分区编辑（split editing）、快速项目切换（instant project switch），你还可以随意地自定义更多功能。还有，这款编辑器支持Mac、Windows和Linux平台。</p>
<span id="more"></span>
<h3 id="安装"><a class="header-anchor" href="#安装">¶</a>安装</h3>
<p>1.官网下载最新版，可以选择text2或者text3，我选择的text3，它出来也很久啦，很多方面已经得到了完善。<br>
2.度娘一下激活码，大多都是可以用的，当然不用激活码也没事，它是无限试用的。<br>
3.有需要可以汉化，其实也没必要，就是一些菜单而已。也不难，网上随意搜下汉化包放到指定位置即可。</p>
<h3 id="插件"><a class="header-anchor" href="#插件">¶</a>插件</h3>
<p>SublimeText本身已经非常强大，但是更棒的是有一长串的插件支持它，给它带来更强大的功能。本文将介绍一些 Sublime Text 3 支持的热门插件（Sublime Text 2 的一些插件在 Sublime Text 3 上不支持）。</p>
<h4 id="package-control"><a class="header-anchor" href="#package-control">¶</a>Package Control</h4>
<p>Package Control 插件是一个方便 Sublime text 管理插件的插件，但因为 Sublime Text 3 更新了 Python 的函数，API不同了，导致基于 Python 开发的插件很多都不能工作，Package Control 原来的安装方法都失效了。</p>
<p>网上有2种使用 Git 的安装方法，感觉太麻烦了。此处将 wbond 网站的 ST3 Package Control 简便安装方法翻译转至此处，方便大家查阅。</p>
<h5 id="简单的安装方法："><a class="header-anchor" href="#简单的安装方法：">¶</a>简单的安装方法：</h5>
<p>从菜单 View - Show Console 或者 ctrl + ~ 快捷键，调出 console。将以下 Python 代码粘贴进去并 enter 执行，不出意外即完成安装。以下提供 ST3 和 ST2 的安装代码：<br>
Sublime Text 3：</p>
<pre><code>import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())`
</code></pre>
<p>Sublime Text 2：</p>
<pre><code>import urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), 'wb' ).write( urllib2.urlopen( 'http://sublime.wbond.net/' +pf.replace( ' ','%20' )).read()); print( 'Please restart Sublime Text to finish installation')
</code></pre>
<h4 id="emmet"><a class="header-anchor" href="#emmet">¶</a>Emmet</h4>
<p>Emmet 是一个前端开发的利器，其前身是 Zen Coding。它让编写 HTML 代码变得简单。Emmet 的基本用法是：输入简写形式，然后按 Tab 键。<br>
安装请使用上面的插件哦！</p>
<p>关于 Emmet 的更多用法，请看<a href="http://docs.emmet.io/">官方文档</a>，这份<a href="http://docs.emmet.io/cheat-sheet/">速查表</a>可以帮你快速记忆简写形式。</p>
<h4 id="soda-theme"><a class="header-anchor" href="#soda-theme">¶</a>Soda Theme</h4>
<p>Soda Theme 是最受欢迎的 Sublime Text 主题。<br>
现在Soda集成了Light和Dark，以前是要分开下的呢。话不多说，上使用方法：<br>
在你的配置文件（菜单 Preferences -&gt; Settings - User）中加入&quot;theme&quot;: “Soda Light.sublime-theme” 或 “theme”: “Soda Dark.sublime-theme”</p>
<h4 id="sublimelinter"><a class="header-anchor" href="#sublimelinter">¶</a>SublimeLinter</h4>
<p>SublimeLinter 是一个代码校验插件，它可以帮你找出错误或编写不规范的代码，支持 C/C++、CoffeeScript、CSS、Git Commit Messages、Haml、HTML、Java、JavaScript、Lua、Objective-J、Perl、PHP、Puppet、Python、Ruby 和 XML 语言。</p>
<p>SublimeLinter 默认以 background 模式运行，在用户输入的同时即时校验，如果你想要 Sublime Text 运行得更流畅，可以空白处右键改为 load-save 模式或 save-only 模式，在读取和保存是校验或只在保存时校验。</p>
<h4 id="sublime-code-intel"><a class="header-anchor" href="#sublime-code-intel">¶</a>Sublime​Code​Intel</h4>
<p>Sublime​Code​Intel 是一个代码提示、补全插件，支持 JavaScript、Mason、XBL、XUL、RHTML、SCSS、Python、HTML、Ruby、Python3、XML、Sass、XSLT、Django、HTML5、Perl、CSS、Twig、Less、Smarty、Node.js、Tcl、TemplateToolkit 和 PHP 等语言，是 Sublime Text 自带代码提示功能的很好扩展。它还有一个功能就是跳转到变量、函数定义的地方，十分方便。</p>
<h4 id="alignment"><a class="header-anchor" href="#alignment">¶</a>Alignment</h4>
<p>Alignment 是一个代码格式化插件，它可以使多行代码中的等号对齐，也可以调整多行代码为一个缩进级别，默认快捷键是 ctrl+alt+a（Mac OS 上是 cmd+ctrl+a）。跟QQ截图冲突了？自己改下吧，我改成了ctrl+shift+a。</p>
<h4 id="colorpicker"><a class="header-anchor" href="#colorpicker">¶</a>ColorPicker</h4>
<p>在编辑CSS样式的时候，要加个自己喜欢颜色或改改颜色啥的，要到PS里去调色？ColorPicker 可以让 Sublime Text 3内置一个调色盘，调好颜色，点击OK就会在光标处生成十六进制颜色代码。</p>
<h4 id="csscomb"><a class="header-anchor" href="#csscomb">¶</a>CssComb</h4>
<p>这是用来给CSS属性进行排序的格式化插件。如果你想保持的代码干净整洁，并且希望按一定的顺序排列（是不是有点强迫症了？），那么这个插件是一种有效解决的方案。特别是当你和其他有自己代码编写风格的开发者一同协作的时候。</p>
<h4 id="converttoutf8"><a class="header-anchor" href="#converttoutf8">¶</a>ConvertToUTF8</h4>
<p>Sublime原生不支持GBK等编码，打开这类编码文件时中文或一些字符都乱码了，安装该插件即可解决</p>
<h4 id="html5-htmlattributes"><a class="header-anchor" href="#html5-htmlattributes">¶</a>HTML5&amp;HTMLattributes</h4>
<p>这两个插件对弥补了sublime对html5支持度不足的缺陷</p>
<h4 id="jquery"><a class="header-anchor" href="#jquery">¶</a>Jquery</h4>
<p>顾名思义，包含jquery函数</p>
<h4 id="codeformatter"><a class="header-anchor" href="#codeformatter">¶</a>CodeFormatter</h4>
<p>可以对html、JS、CSS、PHP、python代码格式化的插件</p>
<p>默认快捷键ctrl+alt+F，如果想对PHP格式化，需要到该插件默认设置中设定php.exe的路径</p>
<h4 id="brackethighlighter"><a class="header-anchor" href="#brackethighlighter">¶</a>BracketHighLighter</h4>
<p>括号、标记高亮等等，挺好用的，只是偶尔识别错误</p>
<h4 id="docblockr"><a class="header-anchor" href="#docblockr">¶</a>DocBlockr</h4>
<p>DocBlockr 可以使你很方便地对代码建立文档。它会解析函数，变量，和参数，根据它们自动生成文档范式，你的工作就是去填充对应的说明。</p>
<h4 id="jsformat"><a class="header-anchor" href="#jsformat">¶</a>JsFormat</h4>
<p>一个JS代码格式化插件。</p>
<h4 id="markdownediting"><a class="header-anchor" href="#markdownediting">¶</a>MarkdownEditing</h4>
<p>此篇博客用到了该插件</p>
<h4 id="omnimarkuppreviewer"><a class="header-anchor" href="#omnimarkuppreviewer">¶</a>OmniMarkupPreviewer</h4>
<p>用来预览markdown的插件，相同功能的有Markdown Preview</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员修炼之道</title>
    <url>/2016/02/04/ThePragmaticProgrammer/</url>
    <content><![CDATA[<p>多码代码，多思考，少敲bug，少跟产品干架 看看月薪3万的程序员都避开了哪些坑：</p>
<span id="more"></span>
<h4 id="习惯即刻回报"><a class="header-anchor" href="#习惯即刻回报">¶</a>习惯即刻回报</h4>
<p>他不懂得只有春天播种，秋天才会有收获。<br>
刚刚付出一点点，甚至还没有付出，就想要得到回报。技术刚刚掌握，能一边百度一边干活了就觉得该拿到多少多少钱了。找工作先想着多少多少钱，入职了没干几个月就想着要加多少多少钱，干了没几个月，薪水要是没涨，就放弃了，准备通过跳槽加薪，不跳槽的话，往往也会因为没加薪而牢骚满腹，工作敷衍了事。</p>
<h4 id="一个程序员的价值-是通过他带给公司的价值体现的"><a class="header-anchor" href="#一个程序员的价值-是通过他带给公司的价值体现的">¶</a>一个程序员的价值，是通过他带给公司的价值体现的。</h4>
<p>先给公司带来了价值，然后才会反过来在薪水上体现出自己的价值。公司都很现实，很少会为你的潜力买单，在你还没有体现出价值时就给你很高的薪水。 在生活和工作中，一定要懂得付出，不要那么急功近利，马上想得到回报。天下没有白吃的午餐，你想获得什么，就得先付出什么。唯有种下种子，然后浇水、施肥、除草、杀虫，然后才能等来收获。</p>
<h4 id="缺乏学习热情"><a class="header-anchor" href="#缺乏学习热情">¶</a>缺乏学习热情</h4>
<p>很少有哪个岗位的人像程序员这样需要持续不断的学习，软件开发的技术日新月异，而每一项技术又往往博大精深，不持续、深入钻研是很难掌握的，更别谈精通了。如果你对一项技术不能深刻理解熟练应用，表现出来的水准仅仅是能干活、还行，那很难说会有公司愿意为“还行”付出大的代价，只有脱颖而出，才可能备受重视。 假如你对学习、掌握、精通技术没有兴趣，面对不断涌现的新语言新技术新框架没有学习欲望，那但就软件开发这个工作而言，你不但眼下不太可能拿到高薪，将来也不会。在这样一个快速变化的时代，只有不断地学习才不会被抛弃。</p>
<h4 id="不够努力"><a class="header-anchor" href="#不够努力">¶</a>不够努力</h4>
<p>虽然我们都知道努力学习可以改变我们的技能水平，持续努力不懈坚持可以让自己有所建树，可还是有很多人浅尝辄止，三天打鱼两天晒网，搞两下能Run就放下了。 人和人在聪明才智上的差距并没有想象中大，甚至很多时候，从大多数人的努力程度之低来看，根本还轮不到拼天赋。如果两个人的实力半斤八两的话，热情工作努力坚持的人，一定比较容易成功。</p>
<h4 id="畏难"><a class="header-anchor" href="#畏难">¶</a>畏难</h4>
<p>做事拈轻怕重，不愿挑战。殊不知能力就是在不断挑战不断突破自己的过程中历练出来的。在一个公司里面，经常承担高难度任务的程序员，一定是成长比较快的，薪水增长也一定是比较快的。越是困难的事情，越能体现出个人价值，也越能带给个人成长。 万事起头难，不要害怕困难。事情做不好往往不是因为没有能力，大都是由于缺乏恒心。只要不怕困难，坚持前行，一定会有不一样的收获。 事业就像女人，谁去追求，谁就能得手。金钱也一样。</p>
<h4 id="缺乏责任心"><a class="header-anchor" href="#缺乏责任心">¶</a>缺乏责任心</h4>
<p>工作上不管什么事儿，反正不是自己的事儿，缺乏责任心，干好干不好都无所谓，对交付承诺、对产品质量都不在意，没什么事儿能让他上心。 一个人的责任心如何，决定着他在工作中的态度，决定着其事业的好坏和成败。如果一个人没有责任心，即使他有再大的能耐，也不一定能做出好的成绩来。</p>
<h4 id="消极-抱怨"><a class="header-anchor" href="#消极-抱怨">¶</a>消极，抱怨</h4>
<p>工作稍有不顺，就怨气沸腾，这个怎么怎么样，那个怎么怎么样，而我怎么就这样，任务不公平，资源不公平，那谁谁不支持我，那谁谁不配合…… 抱怨不能使事情变好，反之，它会让负面情绪蔓延，蚕食你的精力和时间，让你产出更低。成功者永不抱怨，抱怨者永不成功。立刻停止抱怨，早一分钟停止，你就离目标近一分钟。</p>
<h4 id="没有时间管理观念"><a class="header-anchor" href="#没有时间管理观念">¶</a>没有时间管理观念</h4>
<p>每个人的一天都只有24小时，人和人的差别就在于如何利用时间上。 有的人每周都有目标，每天都有计划，早上起来会想今天要做的几件重要的事，晚上会回顾今天完成的事，总结干成了什么干坏了什么，还会有计划的学习新知识新技能，这样日积月累不断坚持，每一天都是高效的，每一天都朝着更丰富更完美的自己前进。 而有的人则漫无目的，走哪算哪，到了公司，上午基本做不成事儿，到下午了还不知道要做什么，晚上也发愁如何消磨时间……</p>
<h4 id="为薪水工作"><a class="header-anchor" href="#为薪水工作">¶</a>为薪水工作</h4>
<p>虽然工作的一大目的是获取薪水，养活自己以及供给家庭所需;但是，这只是工作最直接的报偿，同时也是最低级的目标。 如果我们为薪水而工作，将注定我们是短视的，也将注定受到最深的伤害。假如你看不到工资以外的东西，斤斤计较于薪水、福利、职位等，那外界的些微风吹草动就可能让你像浮萍一样飘来荡去，你很快就会失去平衡，失去信心，失去热情，失去平和，进而在工作时总是采取一种应付了事的态度，能少做就少做，能躲避就躲避，觉得只要对得起自己的那份薪水就成了。长此以往，你追求的高薪水反倒得不到。 我们进入一个公司工作，是为了自己，不是薪水也不是别人，比薪水更重要的，是成长和成就自己的机会。我们一定要明白，公司、企业、组织，都是我们锻炼自己、修炼自我的平台，我们不是为薪水工作、不是为老板工作、不是为家人工作，是为实现自我而工作，是为更完美的自己而工作。 唯有志存高远，方能风行天下。</p>
<h4 id="其实不喜欢软件开发"><a class="header-anchor" href="#其实不喜欢软件开发">¶</a>其实不喜欢软件开发</h4>
<p>有一部分人从事软件开发工作，并不是因为喜欢，也没有干着干着从不喜欢变成喜欢。他们可能是喜欢软件开发附带的高薪水——平均薪水比其他行业高。人做一件自己不喜欢的事情时，心理上没有亲近感，不会想着怎样把事情做得更好，往往是差不多就成了，不太可能有精益求精积极向上的追求。因为在做不喜欢的事情时，情感上是拒绝的，情绪上是想逃离的，总想着早点儿完事儿拉倒，每一天去单位时不是充满期待，而是各种担忧、烦躁、畏惧，到了单位，稍有困难或不顺心，就会消极、抱怨、抵触、拒绝…… 做喜欢的事，能最大可能发挥一个人的潜能和热情，会最快速地通向成功成就自己。而做不喜欢的事，一开始就注定了事倍功半，最后也往往会是痛苦不堪或半途而废。</p>
<h4 id="不要和比你差的人比较"><a class="header-anchor" href="#不要和比你差的人比较">¶</a>不要和比你差的人比较</h4>
<p>即使现在他的工资可能比你高，不要觉得不公平，社会本就没有公平可言，有着一日，你的工资绝对会在他之上，前提是保证自己做到最好，做事先做人。</p>
<h4 id="少干嘴架"><a class="header-anchor" href="#少干嘴架">¶</a>少干嘴架</h4>
<p>干嘴架赢了一时爽，并不会对你敲代码有所提升，理清思路，以需求为原则，站在合理的角度看待需求</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>SublimeLinter如何校验html、js、css</title>
    <url>/2016/02/01/SublimeLinterHowToUse/</url>
    <content><![CDATA[<p>SublimeLinter是Sublime的一个代码检测工具插件。但是要正常使用它,还需要安装相应的插件。</p>
<span id="more"></span>
<h3 id="html校验工具"><a class="header-anchor" href="#html校验工具">¶</a>Html校验工具</h3>
<ol>
<li>
<p>先安装SublimeLinter-contrib-htmlhint,很简单,ctrl+shift+p 直接install;</p>
</li>
<li>
<p>安装htmlhint,打开cmd;</p>
<p><code>npm install -g htmlhint@latest</code></p>
</li>
<li>
<p>检查安装是否完成;</p>
<p><code>htmlhint --version</code></p>
</li>
</ol>
<h3 id="js校验工具"><a class="header-anchor" href="#js校验工具">¶</a>Js校验工具</h3>
<ol>
<li>
<p>先安装SublimeLinter-jshint;</p>
</li>
<li>
<p>安装jshint;</p>
<p><code>npm install -g jshint</code></p>
</li>
<li>
<p>检查安装是否完成;</p>
<p><code>jshint -v</code></p>
</li>
</ol>
<h3 id="css校验工具"><a class="header-anchor" href="#css校验工具">¶</a>Css校验工具</h3>
<ol>
<li>
<p>先安装SublimeLinter-csslint;</p>
</li>
<li>
<p>安装csslint</p>
<p><code>npm install -g csslint</code></p>
</li>
<li>
<p>检查安装是否完成</p>
<p><code>csslint --version</code></p>
</li>
</ol>
<p>好了,这样应该就可以自动校验了.</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>用markdown来写api</title>
    <url>/2016/06/15/UseMarkdownToWriteAPI/</url>
    <content><![CDATA[<p>一直在找寻最合适的方法来实现api接口文档的书写，直达发现了markdown,虽然也用markdown，却从来没想过可以这么优雅地来写api哈。那么开始get新技能吧。</p>
<span id="more"></span>
<p>##接口文档</p>
<p>[TOC]</p>
<hr>
<h3 id="查询指定项目属性"><a class="header-anchor" href="#查询指定项目属性">¶</a>查询指定项目属性</h3>
<p><strong>接口功能</strong></p>
<blockquote>
<p>获取制定项目的分类信息</p>
</blockquote>
<p><strong>URL</strong></p>
<blockquote>
<p><a href="http://www.api.com/index.php">http://www.api.com/index.php</a></p>
</blockquote>
<p><strong>请求参数</strong></p>
<blockquote>
<p>|参数|必选|类型|说明|<br>
|:-----  |:-------|:-----|-----                               |<br>
|name    |ture    |string|请求的项目名                          |<br>
|type    |true    |int   |请求项目的类型。1：类型一；2：类型二 。|</p>
</blockquote>
<p><strong>返回字段</strong></p>
<blockquote>
<p>|返回字段|字段类型|说明                              |<br>
|:-----   |:------|:-----------------------------   |<br>
|status   |int    |返回结果状态。0：正常；1：错误。   |<br>
|company  |string | 所属公司名                      |<br>
|category |string |所属类型                         |</p>
</blockquote>
<p><strong>接口示例</strong></p>
<blockquote>
<p>地址：<a href="http://www.api.com/index.php?name=%22%E5%8F%AF%E5%8F%A3%E5%8F%AF%E4%B9%90%22&amp;type=1">http://www.api.com/index.php?name=“可口可乐”&amp;type=1</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;statue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;company&quot;</span>: <span class="string">&quot;可口可乐&quot;</span>,</span><br><span class="line">    <span class="string">&quot;category&quot;</span>: <span class="string">&quot;饮料&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是源代码</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment">##接口文档</span></span><br><span class="line"></span><br><span class="line">[<span class="title class_">TOC</span>]</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查询指定项目属性</span></span><br><span class="line"> **接口功能**</span><br><span class="line">&gt; 获取制定项目的分类信息</span><br><span class="line"></span><br><span class="line"> **<span class="title class_">URL</span>**</span><br><span class="line">&gt; <span class="symbol">http:</span>//www.api.com/index.php</span><br><span class="line"></span><br><span class="line">**请求参数**</span><br><span class="line">&gt; |参数|必选|类型|说明|</span><br><span class="line">|<span class="symbol">:-----</span>  |<span class="symbol">:-------|</span><span class="symbol">:-----|-----</span>                               |</span><br><span class="line">|name    |ture    |string|请求的项目名                          |</span><br><span class="line">|type    |<span class="literal">true</span>    |int   |请求项目的类型。<span class="number">1</span>：类型一；<span class="number">2</span>：类型二 。|</span><br><span class="line"></span><br><span class="line">**返回字段**</span><br><span class="line">&gt; |返回字段|字段类型|说明                              |</span><br><span class="line">|<span class="symbol">:-----</span>   |<span class="symbol">:------|</span><span class="symbol">:-----------------------------</span>   |</span><br><span class="line">|status   |int    |返回结果状态。<span class="number">0</span>：正常；<span class="number">1</span>：错误。   |</span><br><span class="line">|company  |string | 所属公司名                      |</span><br><span class="line">|category |string |所属类型                         |</span><br><span class="line"></span><br><span class="line">**接口示例**</span><br><span class="line">&gt; 地址：[<span class="symbol">http:</span>//www.api.com/index.php?name=<span class="string">&quot;可口可乐&quot;</span>&amp;type=<span class="number">1</span>](<span class="symbol">http:</span>//www.api.com/index.php?name=<span class="string">&quot;可口可乐&quot;</span>&amp;type=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">``` javascript</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;statue&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;company&quot;</span>: <span class="string">&quot;可口可乐&quot;</span>,</span><br><span class="line">    <span class="string">&quot;category&quot;</span>: <span class="string">&quot;饮料&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后的```自己补上</p>
<p>但是markdown还是有缺陷，比如toc问题，兼容性问题等。<br>
最佳效果是wiki配上markdown，这样内部沟通问题很好解决。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装fastdfs并整合nginx</title>
    <url>/2019/08/01/centos7fdfsnginx/</url>
    <content><![CDATA[<p>准备搞个IM,用FastDFS来存储聊天文件，随便找个教程就开撸，结果悲剧了😂😂😂😂 ,深入了解后，虽然复杂，但并不难，下面帮大家踩坑。</p>
<span id="more"></span>
<h3 id="1-fastdfs搭建工具下载"><a class="header-anchor" href="#1-fastdfs搭建工具下载">¶</a>1.FastDFS搭建工具下载</h3>
<p>作者的GitHub地址：<a href="https://github.com/happyfish100">https://github.com/happyfish100</a></p>
<p>去作者github下载最新版，注意版本对应</p>
<p>Version 5.11对应的fastdfs-nginx-module的Version 1.20 ** **Version 5.10对应的fastdfs-nginx-module的Version 1.19</p>
<p>之所以在安装前写了这么一段话，是因为这个很重要，版本不对应会给接下来的安装带来各种问题。</p>
<p>注意： 下载的时候要下fastdfs-5.11.zip 这个是没有错误的。如果下载 fastdfs-5.11.tar.gz 编译安装会报错；对于fastdfs-nginx-module-1.20.zip也要下载zip结尾的，不然编译和安装会有问题。</p>
<p>当然可以直接去官网去下载，但是官网上不是最新的。</p>
<h3 id="2-安装需要用到的应用与类库"><a class="header-anchor" href="#2-安装需要用到的应用与类库">¶</a>2.安装需要用到的应用与类库</h3>
<p>首先按需要安装基础依赖</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">yum install vim wget <span class="literal">zlib</span> <span class="literal">zlib</span>-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl net-tools unzip</span><br></pre></td></tr></table></figure>
<h3 id="3-安装libfastcommon"><a class="header-anchor" href="#3-安装libfastcommon">¶</a>3.安装libfastcommon</h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@localhost FastDFS]# <span class="keyword">cd</span> libfastcommon-<span class="number">1.0</span>.<span class="number">39</span></span><br><span class="line">[root@localhost libfastcommon-<span class="number">1.0</span>.<span class="number">39</span>]# ./<span class="keyword">make</span>.<span class="keyword">sh</span> &amp;&amp; ./<span class="keyword">make</span>.<span class="keyword">sh</span> install</span><br></pre></td></tr></table></figure>
<p>libfastcommon默认会被安装到/usr/lib64/libfastcommon.so但是FastDFS的主程序却在/usr/local/lib目录下 这个时候我们就要建立一个软链接了，实际上也相当于windows上的快捷方式。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>lib64<span class="regexp">/libfastcommon.so /u</span>sr<span class="regexp">/local/</span>lib/libfastcommon.so</span><br><span class="line">ln -s <span class="regexp">/usr/</span>lib64<span class="regexp">/libfastcommon.so /u</span>sr<span class="regexp">/lib/</span>libfastcommon.so</span><br><span class="line">ln -s <span class="regexp">/usr/</span>lib64<span class="regexp">/libfdfsclient.so /u</span>sr<span class="regexp">/local/</span>lib/libfdfsclient.so</span><br><span class="line">ln -s <span class="regexp">/usr/</span>lib64<span class="regexp">/libfdfsclient.so /u</span>sr<span class="regexp">/lib/</span>libfdfsclient.so</span><br></pre></td></tr></table></figure>
<h3 id="4-安装fastdfs"><a class="header-anchor" href="#4-安装fastdfs">¶</a>4.安装FastDFS</h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">unzip fastdfs-<span class="number">5.11</span>.zip</span><br><span class="line"><span class="keyword">cd</span> fastdfs-<span class="number">5.11</span></span><br><span class="line">./<span class="keyword">make</span>.<span class="keyword">sh</span></span><br><span class="line">./<span class="keyword">make</span>.<span class="keyword">sh</span> install</span><br></pre></td></tr></table></figure>
<p>如果没有报错那么就成功了。安装log中会提示FastDFS安装到了/etc/fdfs目录下。</p>
<p>成功后查看安装目录：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">ll /etc/fdfs/</span><br><span class="line">-rw-r--r--.<span class="number"> 1 </span>root      root      <span class="number"> 1463 </span>11月 <span class="number"> 8 </span>12:52 client.conf.sample</span><br><span class="line"></span><br><span class="line">-rw-r--r--.<span class="number"> 1 </span>root      root      <span class="number"> 7938 </span>11月 <span class="number"> 8 </span>14:55 storage.conf.sample</span><br><span class="line"></span><br><span class="line">-rw-r--r--.<span class="number"> 1 </span>root      root      <span class="number"> 7397 </span>11月 <span class="number"> 8 </span>12:36 tracker.conf.sample</span><br></pre></td></tr></table></figure>
<p>我们需要把这三个示例文件复制一份，去掉.sample</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">cp client.<span class="keyword">conf</span>.<span class="keyword">sample</span> client.<span class="keyword">conf</span></span><br><span class="line">cp storage.<span class="keyword">conf</span>.<span class="keyword">sample</span> storage.<span class="keyword">conf</span></span><br><span class="line">cp tracker.<span class="keyword">conf</span>.<span class="keyword">sample</span> tracker.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>
<h3 id="5-安装tracker"><a class="header-anchor" href="#5-安装tracker">¶</a>5.安装tracker</h3>
<h5 id="创建tracker工作目录"><a class="header-anchor" href="#创建tracker工作目录">¶</a>创建tracker工作目录</h5>
<p>这个目录可以自定义，用来保存tracker的data和log<br>
根据个人习惯，我创建了下面的目录：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">mkdir /home/fastdfs_tracker</span><br></pre></td></tr></table></figure>
<h5 id="配置tracker"><a class="header-anchor" href="#配置tracker">¶</a>配置tracker</h5>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line">打开后重点关注下面4个配置： </span><br><span class="line">1.<span class="attribute">disabled</span>=<span class="literal">false</span> </span><br><span class="line">2.<span class="attribute">port</span>=22122 #默认端口号 </span><br><span class="line">3.<span class="attribute">base_path</span>=/home/fastdfs_tracker #我刚刚创建的目录 </span><br><span class="line">4.http.<span class="attribute">server_port</span>=8080 #默认端口是8080</span><br><span class="line">5.bind_addr= 0.0.0.0 监听地址</span><br></pre></td></tr></table></figure>
<h5 id="启动tracker"><a class="header-anchor" href="#启动tracker">¶</a>启动tracker</h5>
<p>保存配置后启动tracker，命令如下：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service fdfs_trackerd <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<p>成功后应该可以看到：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Starting</span> fdfs_trackerd (via systemctl):<span class="meta"> [ OK ]</span></span><br></pre></td></tr></table></figure>
<p>进行刚刚创建的tracker目录，发现目录中多了data和log两个目录</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ll</span> /home/fastdfs_tracker/</span><br><span class="line"><span class="attribute">drwxr</span>-xr-x. <span class="number">2</span> root root <span class="number">4096</span> <span class="number">11</span>月  <span class="number">8</span> <span class="number">15</span>:<span class="number">01</span> data</span><br><span class="line"><span class="attribute">drwxr</span>-xr-x. <span class="number">2</span> root root <span class="number">4096</span> <span class="number">11</span>月  <span class="number">8</span> <span class="number">12</span>:<span class="number">37</span> logs</span><br></pre></td></tr></table></figure>
<p>最后我们需要给tracker加入开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;service fdfs_trackerd start&quot;</span> |<span class="built_in">tee</span> -a /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<p>查看一下tracker的端口监听情况</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netstat</span> -unltp|grep fdfs</span><br><span class="line"><span class="attribute">tcp</span>        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0.0.0:22122</span>           <span class="number">0.0.0.0</span>:*               LISTEN      <span class="number">70382</span>/fdfs_trackerd </span><br></pre></td></tr></table></figure>
<p>端口22122成功监听。</p>
<h3 id="6-安装storage"><a class="header-anchor" href="#6-安装storage">¶</a>6.安装storage</h3>
<p>storage的安装与tracker很类似。</p>
<h5 id="为storage配置工作目录"><a class="header-anchor" href="#为storage配置工作目录">¶</a>为storage配置工作目录</h5>
<p>与tracker不同的是，由于storage还需要一个目录用来存储数据，所以我另外多建了两个目录<code>fastdfs_storage_data</code>,<code>fastdfs_storage</code><br>
下面是我的目录结构：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">[root@localhost upload]<span class="comment"># ll /home/</span></span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x.<span class="number"> 4 </span>root root <span class="number"> 30 </span>8月  <span class="number"> 1 </span>10:54 fastdfs_storage</span><br><span class="line">drwxr-xr-x.<span class="number"> 3 </span>root root <span class="number"> 18 </span>8月  <span class="number"> 1 </span>10:54 fastdfs_storage_data</span><br><span class="line">drwxr-xr-x.<span class="number"> 4 </span>root root <span class="number"> 30 </span>8月  <span class="number"> 1 </span>10:46 fastdfs_tracker</span><br></pre></td></tr></table></figure>
<h5 id="修改storage配置文件"><a class="header-anchor" href="#修改storage配置文件">¶</a>修改storage配置文件</h5>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vi /etc/fdfs/storage.conf</span><br><span class="line">1.<span class="attribute">disabled</span>=<span class="literal">false</span> </span><br><span class="line">2.<span class="attribute">group_name</span>=group1 #组名，根据实际情况修改 </span><br><span class="line">3.<span class="attribute">port</span>=23000 #设置storage的端口号，默认是23000，同一个组的storage端口号必须一致 </span><br><span class="line">4.<span class="attribute">base_path</span>=/home/fastdfs_storage #设置storage数据文件和日志目录 </span><br><span class="line">5.<span class="attribute">store_path_count</span>=1 #存储路径个数，需要和store_path个数匹配 </span><br><span class="line">6.<span class="attribute">store_path0</span>=/home/fastdfs_storage_data #实际文件存储路径 </span><br><span class="line">7.<span class="attribute">tracker_server</span>=172.20.132.57:22122 #我CentOS7的ip地址 </span><br><span class="line">8.http.<span class="attribute">server_port</span>=8888 #设置 http 端口号</span><br></pre></td></tr></table></figure>
<p>修改保存后创建软引用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/fdfs_storaged /u</span>sr<span class="regexp">/local/</span>bin</span><br></pre></td></tr></table></figure>
<h5 id="启动storage"><a class="header-anchor" href="#启动storage">¶</a>启动storage</h5>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service</span> fdfs_storaged start</span><br><span class="line"><span class="attribute">Starting</span> fdfs_storaged (via systemctl):<span class="meta"> [ OK ]</span></span><br></pre></td></tr></table></figure>
<p>同样的，设置开机启动： 修改rc.local</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;service fdfs_storaged start&quot;</span> |<span class="built_in">tee</span> -a /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<p>查看一下服务是否启动</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netstat</span> -unltp | grep fdfs </span><br><span class="line"><span class="attribute">tcp</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.0.0.0:22122</span> <span class="number">0.0.0.0</span>:* LISTEN <span class="number">2231</span>/fdfs_trackerd</span><br><span class="line"><span class="attribute">tcp</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.0.0.0:23000</span> <span class="number">0.0.0.0</span>:* LISTEN <span class="number">2323</span>/fdfs_storaged</span><br></pre></td></tr></table></figure>
<h5 id="校验整合"><a class="header-anchor" href="#校验整合">¶</a>校验整合</h5>
<p>到这里，fastdfs的东西都已安装完成，最后我们还要确定一下，storage是否注册到了tracker中去。<br>
查看命令：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/fdfs_monitor /</span>etc<span class="regexp">/fdfs/</span>storage.conf</span><br></pre></td></tr></table></figure>
<p>成功后可以看到：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ip_addr</span> = <span class="number">172.20</span>.<span class="number">132.57</span> (localhost.localdomain) ACTIVE</span><br></pre></td></tr></table></figure>
<h3 id="7-测试"><a class="header-anchor" href="#7-测试">¶</a>7.测试</h3>
<h5 id="7-1配置客户端"><a class="header-anchor" href="#7-1配置客户端">¶</a>7.1配置客户端</h5>
<p>同样的，需要修改客户端的配置文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>fdfs/client.conf</span><br><span class="line">base_path=<span class="regexp">/home/</span>fastdfs_tracker <span class="comment">#tracker服务器文件路径</span></span><br><span class="line">tracker_server=<span class="number">172.20</span>.<span class="number">132.57</span>:<span class="number">22122</span> <span class="comment">#tracker服务器IP地址和端口号</span></span><br><span class="line">http.tracker_server_port=<span class="number">8080</span> <span class="comment"># tracker 服务器的 http端口号，必须和tracker的设置对应起来</span></span><br></pre></td></tr></table></figure>
<h5 id="7-2模拟上传"><a class="header-anchor" href="#7-2模拟上传">¶</a>7.2模拟上传</h5>
<p>确定图片位置后，我们输入上传图片命令：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/fdfs_upload_file  /</span>etc<span class="regexp">/fdfs/</span>client.conf  <span class="regexp">/root/</span><span class="number">1</span>.jpg  <span class="comment">#这后面放的是图片的位置</span></span><br></pre></td></tr></table></figure>
<p>成功后会返回图片的路径：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/fdfs_upload_file  /</span>etc<span class="regexp">/fdfs/</span>client.conf  <span class="regexp">/root/</span><span class="number">2</span>.png</span><br><span class="line">group1<span class="regexp">/M00/</span><span class="number">00</span><span class="regexp">/00/</span>rBSEOVoC2QCAJVdoAAFeVJMpopw987.png</span><br></pre></td></tr></table></figure>
<p>可以查看文件真实路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ls <span class="regexp">/home/</span>fastdfs_storage_data<span class="regexp">/data/</span><span class="number">00</span><span class="regexp">/00/</span></span><br><span class="line">wKhUhF1CVSqAQLUHAAGuTZ1x9Eo70.jpeg</span><br></pre></td></tr></table></figure>
<p>果然通过刚刚返回的路径，我们成功找到了图片。</p>
<p>我们仔细看一下，实际文件存储路径下有创建好的多级目录。data下有256个1级目录，每级目录下又有256个2级子目录，总共65536个文件，新写的文件会以hash的方式被路由到其中某个子目录下，然后将文件数据直接作为一个本地文件存储到该目录中。</p>
<h6 id="如果要访问刚上传的图片-我们得需要结合nginx来实现"><a class="header-anchor" href="#如果要访问刚上传的图片-我们得需要结合nginx来实现">¶</a>如果要访问刚上传的图片，我们得需要结合nginx来实现</h6>
<h6 id="http请求不能访问文件的原因"><a class="header-anchor" href="#http请求不能访问文件的原因">¶</a>HTTP请求不能访问文件的原因</h6>
<p>我们在使用FastDFS部署一个分布式文件系统的时候，通过FastDFS的客户端API来进行文件的上传、下载、删除等操作。同时通过FastDFS的HTTP服务器来提供HTTP服务。但是FastDFS的HTTP服务较为简单，无法提供负载均衡等高性能的服务，所以FastDFS的开发者——淘宝的架构师余庆同学，为我们提供了Nginx上使用的FastDFS模块（也可以叫FastDFS的Nginx模块）。<br>
FastDFS通过Tracker服务器,将文件放在Storage服务器存储,但是同组之间的服务器需要复制文件,有延迟的问题.假设Tracker服务器将文件上传到了172.20.132.57,文件ID已经返回客户端,这时,后台会将这个文件复制到172.20.132.57,如果复制没有完成,客户端就用这个ID在172.20.132.57取文件,肯定会出现错误。这个fastdfs-nginx-module可以重定向连接到源服务器取文件,避免客户端由于复制延迟的问题,出现错误。<br>
正是这样，FastDFS需要结合nginx，所以取消原来对HTTP的直接支持。</p>
<h3 id="8-整合nginx"><a class="header-anchor" href="#8-整合nginx">¶</a>8.整合nginx</h3>
<h5 id="8-1-安装nginx"><a class="header-anchor" href="#8-1-安装nginx">¶</a>8.1 安装nginx</h5>
<p>解压nginx和fastdfs-nginx-module-1.20</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>nginx --add-module=<span class="regexp">/home/u</span>pload<span class="regexp">/fastdfs-nginx-module-1.20/</span>src/</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx </span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx -s stop</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>如果nginx版本过高可能会出现<code>common_define.h:没有那个文件或目录</code>错误</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vim fastdfs-nginx-module-1.20/src<span class="built_in">/config</span></span><br><span class="line"><span class="built_in"></span><span class="attribute">ngx_module_incs</span>=<span class="string">&quot;/usr/include/fastdfs /usr/include/fastcommon/&quot;</span></span><br><span class="line"><span class="attribute">CORE_INCS</span>=<span class="string">&quot;<span class="variable">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon/&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后保存后重新编译nginx就可以了</p>
<h5 id="8-2配置storage-nginx"><a class="header-anchor" href="#8-2配置storage-nginx">¶</a>8.2配置storage nginx</h5>
<p>修改nginx.conf:</p>
<p>修改监听端口 listen 9991， 新增location</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       <span class="number">9991</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">            root</span>   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">location</span> <span class="title">~/group1</span>/M00 &#123;</span><br><span class="line">            root /home/fastdfs_storage/data;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">location</span> <span class="title">= /50x</span>.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后进入FastDFS安装时的解压过的目录，将http.conf和mime.types拷贝到/etc/fdfs目录下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd fastdfs-<span class="number">5.11</span><span class="regexp">/src/</span>conf</span><br><span class="line">cp http.conf  mime.types  <span class="regexp">/etc/</span>fdfs/</span><br></pre></td></tr></table></figure>
<p>另外还需要把fastdfs-nginx-module安装目录中src目录下的mod_fastdfs.conf也拷贝到/etc/fdfs目录下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp mod_fastdfs.conf  <span class="regexp">/etc/</span>fdfs/</span><br></pre></td></tr></table></figure>
<p>对刚刚拷贝的mod_fastdfs.conf文件进行修改：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>fdfs/mod_fastdfs.conf</span><br><span class="line">base_path=<span class="regexp">/home/</span>fastdfs_storage  <span class="comment">#保存日志目录</span></span><br><span class="line">tracker_server=<span class="number">172.20</span>.<span class="number">132.57</span>:<span class="number">22122</span> <span class="comment">#tracker服务器的IP地址以及端口号</span></span><br><span class="line">storage_server_port=<span class="number">23000</span> <span class="comment">#storage服务器的端口号</span></span><br><span class="line">url_have_group_name = true <span class="comment">#文件 url 中是否有 group 名</span></span><br><span class="line">store_path0=<span class="regexp">/home/</span>fastdfs_storage_data   <span class="comment">#存储路径</span></span><br><span class="line">group_count = <span class="number">1</span> <span class="comment">#设置组的个数</span></span><br></pre></td></tr></table></figure>
<p>在文件的最后，设置group</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[group1]</span></span><br><span class="line"><span class="attr">group_name</span>=group1</span><br><span class="line"><span class="attr">storage_server_port</span>=<span class="number">23000</span></span><br><span class="line"><span class="attr">store_path_count</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">store_path0</span>=/home/fastdfs_storage_data</span><br></pre></td></tr></table></figure>
<p>创建M00至storage存储目录的符号连接：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ln  -s  <span class="regexp">/home/</span>fastdfs_storage_data<span class="regexp">/data/</span> <span class="regexp">/home/</span>fastdfs_storage_data<span class="regexp">/data/</span>M00</span><br></pre></td></tr></table></figure>
<p>启动nginx:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx</span><br><span class="line">curl localhost:<span class="number">9991</span></span><br></pre></td></tr></table></figure>
<p>如果出现Welcome to nginx!表示启动成功</p>
<h5 id="8-3配置tracker-nginx"><a class="header-anchor" href="#8-3配置tracker-nginx">¶</a>8.3配置tracker nginx</h5>
<p>在nginx.conf里在添加一个虚拟主机</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"> <span class="section">upstream</span> fdfs_group1 &#123;</span><br><span class="line">     <span class="attribute">server</span> <span class="number">127.0.0.1:9991</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">     <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">     <span class="attribute">server_name</span>  localhost;</span><br><span class="line">     </span><br><span class="line">     <span class="section">location</span> /group1/M00 &#123;</span><br><span class="line">         <span class="attribute">proxy_pass</span> http://fdfs_group1;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>重启nginx</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin/nginx -s reload</span><br><span class="line">ngx_http_fastdfs_set pid=<span class="number">8141</span></span><br></pre></td></tr></table></figure>
<h5 id="8-4http测试"><a class="header-anchor" href="#8-4http测试">¶</a>8.4HTTP测试</h5>
<p>浏览器中输入你刚才上传得到的地址或者重新上传一次</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">84.132</span><span class="regexp">/group1/</span>M00<span class="regexp">/00/</span><span class="number">00</span>/wKhUhF1CVSqAQLUHAAGuTZ1x9Eo70.jpeg</span><br></pre></td></tr></table></figure>
<p>如果显示图片表示配置成功</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>FastDFS</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>Velocity模板语言(VTL) 入门指南</title>
    <url>/2020/05/11/VelocityDoc/</url>
    <content><![CDATA[<p>velocity模板好像没有什么比较好的文档，搜到一个，但是排版有点乱，所以美化和部分翻译以后分享给大家</p>
<span id="more"></span>
<p>原文地址 <a href="https://blog.csdn.net/weixin_34056162/article/details/90686571">https://blog.csdn.net/weixin_34056162/article/details/90686571</a></p>
<p>Velocity模板语言 (VTL)提供了容易，简单，和清洁方式合并动态内容在你的网页上。即使一个网页开发者有少量或者没有编程经验也能很快有能力使用VTL嵌入动态内容到你的Web页面。</p>
<p>VTL使用引用嵌入动态内容到Web页面, 一个引用也是一个引用类型. 变量是一种引用类型能够引用Java中定义变量,或者能够获取它的值在你的Web页面中通过VTL语句。这里有一个例子 VTL语句能够被嵌入到你的HTML文档中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $a = &quot;Velocity&quot; )</span><br></pre></td></tr></table></figure>
<p>这个VTL 语句, 像所有的VTL语句一样，通过 <em>#</em> 字符开始并包含一个指令: <em>set</em>. 当一个用户访问你的页面时,Velocity模板 将在你的Web页面中搜索所有的*#*字符, 然后认为它是VTL语句的开始，但是#字符并没有实际意义。</p>
<p>字符 *#*后面紧跟着, <em>set</em>.<em>set</em> 指向一个表达式 (放在括号里面) — 一个等式为变量分配一个值。变量的定义在左边赋值在右边; 它们之间通过 <em>=</em> 分开。</p>
<p>在上面的实例中, 变量是 <em>$a</em> ,它的值是*Velocity。*这个变量像其它的引用一样, 通过 <em>$</em> 字符开始。字符串的值放在引号中,单引号或双引号都可以。单引号保证引号里面的值分配给变量。双引号准许你使用velocity的引用和指令,例如  “Hello $name”,  <em>$name</em> 将被定义的变量值=右边的内容所替换</p>
<p>下面的规则能使你更好的了解Velocity的工作原理：引用是通过*$* 开始的，用来获取值。指令*#* 用来定义值。</p>
<p>在上面实例中, <em>#set</em> 被用来给变量分配一个值。这个变量是 <em>$a</em>, 能够在模板中使用并输出 “Velocity”。</p>
<p>原文地址 <a href="https://blog.csdn.net/weixin_34056162/article/details/90686571">https://blog.csdn.net/weixin_34056162/article/details/90686571</a></p>
<h2 id="hello-velocity-world实例"><a class="header-anchor" href="#hello-velocity-world实例">¶</a>Hello Velocity World实例</h2>
<p>当一个值分配给一个变量时, 你能够引用这个变量在你的HTML 文档中.在下面的实例中, 先对 <em>$foo</em> 进行赋值，然后引用它.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">#set( $foo = &quot;Velocity&quot; )</span><br><span class="line">Hello $foo World!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;html&gt;</span><br></pre></td></tr></table></figure>
<p>这个网页的结果是答应出 “Hello Velocity World!”.</p>
<p>为了是包含VTL语句指定可读性更强, 我们鼓励你开始每个VTL语句在新的一行, 但并不强制要求你这么做.<em>set</em> 指令将在后面章节详细介绍.</p>
<h2 id="注释"><a class="header-anchor" href="#注释">¶</a>注释</h2>
<p>注释以一种不被Velocity模板修改的原样输出描述文本。注释是一种很有用的方式，提醒你并且告诉其他人VTL语句的作用, 或者存放对你有用的其他信息。下面就是VTL注释的实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 这是一个单行注释.</span><br></pre></td></tr></table></figure>
<p><em>##</em> 表示的是单行注释表示本行都被注释。假如你需要多行注释, 不需要一行一行的注释。你可以使用多行注释, 多行注释以 <code>#*</code> 开始，以 <code>*#</code>做为结束, 可以用它来处理多行注释的情况.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是多行注释，浏览者能看到它。</span><br><span class="line"></span><br><span class="line">#*</span><br><span class="line"> Thus begins a multi-line comment. Online visitors won&#x27;t</span><br><span class="line"> see this text because the Velocity Templating Engine will</span><br><span class="line"> ignore it.</span><br><span class="line"></span><br><span class="line">*#</span><br><span class="line"></span><br><span class="line">这里多行注释; 它是可见的.</span><br></pre></td></tr></table></figure>
<p>这里有很多实例阐明多行注释和单行注释:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This text is visible. ## This text is not.</span><br><span class="line">This text is visible.</span><br><span class="line">This text is visible. #* This text, as part of a multi-line</span><br><span class="line">comment, is not visible. This text is not visible; it is also</span><br><span class="line">part of the multi-line comment. This text still not</span><br><span class="line">visible. *# This text is outside the comment, so it is visible.</span><br><span class="line">## This text is not visible.</span><br></pre></td></tr></table></figure>
<p>这是第三种的注释,  VTL注释块, 它被用来储存一些你需要关注的信息模板 (例如. javadoc作者版本信息):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#**</span><br><span class="line">This is a VTL comment block and</span><br><span class="line">may be used to store such information</span><br><span class="line">as the document author and versioning</span><br><span class="line">information:</span><br><span class="line">@author</span><br><span class="line">@version 5</span><br><span class="line">*#</span><br></pre></td></tr></table></figure>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p>在VTL中有三种类型的引用: 变量，属性和方法。作为一个使用VTL的设计者, 你和工程师必须一起在你的模板中，指定名字以及它所代表的引用。</p>
<p><strong>变量</strong><br>
VTL中变量标识符前面需要添加 “$” 来进行标记. AVTL标识符必须以字母 (a … z or A … Z)开始. 其他的字符可以使用下面几种:</p>
<ul>
<li>alphabetic (a … z, A … Z)</li>
<li>numeric (0 … 9)</li>
<li>hyphen (“-“)</li>
<li>underscore (“_”)</li>
</ul>
<p>下面有一些可用的变量引用实例在VTL中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$foo</span><br><span class="line">$mudSlinger</span><br><span class="line">$mud-slinger</span><br><span class="line">$mud_slinger</span><br><span class="line">$mudSlinger1</span><br></pre></td></tr></table></figure>
<p>当VTL应用一个变量时, 例如*$foo，<em>这个变量可以获取一个值从模板的 <em>set</em>指令中, 或者从Java代码中。例如,假如在Java中定义了一个变量</em>$foo*,java中定义的值Web页面中所有的 <em>$foo</em>引用. 或者, 我在页面中定义下面语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $foo = &quot;bar&quot; )</span><br></pre></td></tr></table></figure>
<p>$foo输出的结果将和你定义的是一样的。</p>
<p><strong>属性</strong><br>
VTL中第二个特点鲜明的引用是属性引用, 属性有一个与众不同的格式. 它的标识符前面需要添加一个*$*变量标识符, 紧跟着后面一个点(“.”) . 下面是一个在VTL中属性引用的实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$customer.Address</span><br><span class="line">$purchase.Total</span><br></pre></td></tr></table></figure>
<p>就拿第一个实例来说, <em>$customer.Address</em>.它有两个意思. 它意味着,查询被<em>customer</em> 标识的哈希表返回和它相关联的<em>Address</em> 的值。同时*$customer.Address<em>也能被一个方法引用 (方法的引用在下一章在讨论); <em>$customer.Address</em>是</em>$customer.getAddress()*的一种缩写形式。如果你的网页有需求, Velocity 将可以使这两种形式变的有意义, 然后返回正确的值。</p>
<p><strong>方法</strong><br>
Java中定义的方法能够定义很多有用的事情, 像进行计算或者达到某种目的. 方法的引用是通过 “$” 标识符, 后面紧跟着方法体. VTL方法体紧跟着左括号符  (“(“), 紧跟着参数列表, 紧跟着右括号符(“)”). 下面是VTL中方法引用的实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$customer.getAddress()</span><br><span class="line">$purchase.getTotal()</span><br><span class="line">$page.setTitle( &quot;My Home Page&quot; )</span><br><span class="line">$person.setAttributes( [&quot;Strange&quot;, &quot;Weird&quot;, &quot;Excited&quot;] )</span><br></pre></td></tr></table></figure>
<p>前两个例 — <em>$customer.getAddress()</em> 和 <em>$purchase.getTotal()</em> — 可以看着是属性的引用, <em>$customer.Address</em> 和*$purchase.*总之.这些引用在VTL中是很常见的!</p>
<p>VTL 属性引用能够被当着方法引用的简写. 属性 <em>$customer.Address</em> 引用和 *$customer.getAddress()*方法的引用效果是一样的. 一般情况下如果可以,我们通过简写的方式来引用方法.属性和方法主要不同是方法能够引用参数 .</p>
<p>下面的方法能够被简写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sun.getPlanets()</span><br><span class="line">$annelid.getDirt()</span><br><span class="line">$album.getPhoto()</span><br></pre></td></tr></table></figure>
<p>我们可能期望方法返回属于太阳的行星的名字, 喂蚯蚓, 或者活动一张图片或者专辑. 下面方法有很长的标记.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sun.getPlanet( [&quot;Earth&quot;, &quot;Mars&quot;, &quot;Neptune&quot;] )</span><br><span class="line">## Can&#x27;t pass a parameter list with $sun.Planets</span><br><span class="line">$sisyphus.pushRock()</span><br><span class="line">## Velocity assumes I mean $sisyphus.getRock()</span><br><span class="line">$book.setTitle( &quot;Homage to Catalonia&quot; )</span><br><span class="line">## Can&#x27;t pass a parameter</span><br></pre></td></tr></table></figure>
<p>自从Velocity 1.6, 所有的数组引用被看这固定长度列表. 这意味着你能够调用java.util.Lis方法在数组引用。所以， 假如你有一个引用在数组上 ( 假定这里有一个字符数组后三个字)，你能够这样做:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$myarray.isEmpty()</span><br><span class="line">$myarray.size()</span><br><span class="line">$myarray.get(2)</span><br><span class="line">$myarray.set(1, &#x27;test&#x27;)</span><br></pre></td></tr></table></figure>
<p>在Velocity 1.6支持可变参数方法. 一个方法 public void setPlanets(String… planets) 或者甚至是 public void setPlanets(String[] planets) (假如你使用Java 5 JDK), 现在可以接受任何数量的参数时调用的模板.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sun.setPlanets(&#x27;Earth&#x27;, &#x27;Mars&#x27;, &#x27;Neptune&#x27;)</span><br><span class="line">$sun.setPlanets(&#x27;Mercury&#x27;)</span><br><span class="line">$sun.setPlanets()</span><br><span class="line">## Will just pass in an empty, zero-length array</span><br></pre></td></tr></table></figure>
<p><strong>属性调用规则</strong><br>
正如前面提到的, 属性经常涉及到父类方法的引用. Velocity是十分擅长解决方法对应的属性获取，它可以根据几种不同的命名约定进行选择，准确的查找规则依赖是否属性的名字以大写开始。对于小写名字,例如 <em>$customer.address</em>, 调用的顺序是</p>
<ol>
<li>getaddress()</li>
<li>getAddress()</li>
<li>get(“address”)</li>
<li>isAddress()</li>
</ol>
<p>对于大写的属性名字像 <em>$customer.Address</em>, 它稍微不同:</p>
<ol>
<li>getAddress()</li>
<li>getaddress()</li>
<li>get(“Address”)</li>
<li>isAddress()</li>
</ol>
<p><strong>渲染</strong><br>
每一个引用的值(变量，属性，或者方法)都被转换为一个字符串并作为最终的输出。假如这里有一个对象表示为*$foo* (例如一个整数对象), 当Velocity调用它时，Velocity会调用它的.toString() 方法转化为字符串.</p>
<p><strong>索引标识符</strong><br>
使用$foo[0] 的符号形式能够访问被定义的索引对象。这个形式和通过get调用一个对象是相同的例如$foo.get(0), 提供了一种简单的语法操作。下面是这种操作的实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$foo[0]       ## $foo takes in an Integer look up</span><br><span class="line">$foo[$i]      ## Using another reference as the index</span><br><span class="line">$foo[&quot;bar&quot;]   ## Passing a string where $foo may be a Map</span><br></pre></td></tr></table></figure>
<p>这相同的语法也能够使用在Java数组上因为由于Velocity封装了数组在访问对象上提供了一个get(Integer)方法,它能返回一个特殊的元素。</p>
<p>相同的语法可以在任何.get的地方使用，例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$foo.bar[1].junk</span><br><span class="line">$foo.callMethod()[1]</span><br><span class="line">$foo[&quot;apple&quot;][4]</span><br></pre></td></tr></table></figure>
<p>一个引用也能够通过索引来进行赋值, 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set($foo[0] = 1)</span><br><span class="line">#set($foo.bar[1] = 3)</span><br><span class="line">#set($map[&quot;apple&quot;] = &quot;orange&quot;)</span><br></pre></td></tr></table></figure>
<p>指定的元素被赋值给定的值。Velocity 尝试第一次 ‘set’ 方法在元素上, 然后通过’put’ 来进行赋值.</p>
<p><strong>正式引用标识符</strong><br>
上面的实例向大家展示了引用标识符的使用, 然后，Velocity也提供了正式引用标识符的引用, 请看下面实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;mudSlinger&#125;</span><br><span class="line">$&#123;customer.Address&#125;</span><br><span class="line">$&#123;purchase.getTotal()&#125;</span><br></pre></td></tr></table></figure>
<p>在大部分情况下你能够使用标识符引用，但是有些情况下要求正确的符号被要求正确的处理。</p>
<p>如果你构建一个语句*$vice*被使用作为一个基础语句的单词。它的目的允许有人选择基础单词产生这种结果: “Jack is a pyromaniac.” 或者 “Jack is a kleptomaniac.”。使用简写标识符将不满足这种需求。思考下面的例句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jack is a $vicemaniac.</span><br></pre></td></tr></table></figure>
<p>它是含糊不清的, Velocity认为它是*$vicemaniac*, 而不是*$vice*. 发现变量*$vicemaniac，*没有赋值，它将返回 <em>$vicemaniac</em>. 现在使用正式标识符能够解决这种问题.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jack is a $&#123;vice&#125;maniac.</span><br></pre></td></tr></table></figure>
<p>现在Velocity能够识别*$vice*, 而不误认为*$vicemaniac*. 正式引用经常被使用在引用指向邻近文本的模板中.</p>
<p><strong>静态引用标识符</strong><br>
当Velocity遇到一个没有定义的引用时，正常的是输出图像引用. 例如, 假如下面的引用是VTL模板的一部分.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;$email&quot;/&gt;</span><br></pre></td></tr></table></figure>
<p>当它初始化时, 变量 <em>$email</em>应用并没有值, 但是你宁愿”$email”是一个空白文本字段 . 使用静态引用标识符避免这种正规的行为; 通过在你的VTL模板中使用*$!email*代替$email。上面的实例可以改成下面这种形式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;$!email&quot;/&gt;</span><br><span class="line">现在当初始化时如果*$email*没有值, 一个空的字符串将输出代替”$email”。</span><br></pre></td></tr></table></figure>
<p>正式应用和静态引用经常一起使用，就像下面实例一样.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;$!&#123;email&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="严格引用模式"><a class="header-anchor" href="#严格引用模式">¶</a>严格引用模式</h2>
<p>Velocity 1.6介绍了一种新的概念，就是严格引用模式，它是通过配置属性的模式来实现灵活的设置。这种设置的目的是使Velocity的特性更加严格区分没有定义或者模棱两可的实例中, 类似与编程语言, 它更适合Velocity的使用。当遇到没有定义或者模棱两可的情况Velocity将抛出异常。下面将讨论严格应用和传统引用的不同之处。</p>
<p>设置引用要求在上下文中或者被#set 指令定义否则Velocity将抛异常。在上下文中引用一个null值并不会产生异常。此外，假如你企图在一个对象中调用一个没有定义的方法或者属性时，它将抛异常。如果调用的方法或属性是一个null值也会产生异常。</p>
<p>在下面的实例中 $bar被定义了但是 $foo却没有被定义,所有这些语句将抛出异常:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$foo                         ## Exception</span><br><span class="line">#set($bar = $foo)            ## Exception</span><br><span class="line">#if($foo == $bar)#end        ## Exception</span><br><span class="line">#foreach($item in $foo)#end  ## Exception</span><br></pre></td></tr></table></figure>
<p>同时, 你调用一个并不存在的方法或属性时，也会产生异常。在下面的实例中 $bar对象定义一个属性 ‘foo’ 返回一个字符串 , ‘retnull’ 将返回null.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$bar.bogus          ## $bar does not provide property bogus, Exception</span><br><span class="line">$bar.foo.bogus      ## $bar.foo does not provide property bogus, Exception</span><br><span class="line">$bar.retnull.bogus  ## cannot call a property on null, Exception</span><br></pre></td></tr></table></figure>
<p>一般严格引用使用所有情况除了特殊的 #if 指令.假如一个引用使用 #if 或者#elseif 指令没有任何方法或属性,假如它并没有和其他值进行比较,这种引用是准许的.这种方式通常用来判断一个引用是否被定义. 在下面的实例中$foo 并没有定义但是它也不会抛异常.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if ($foo)#end                  ## False</span><br><span class="line">#if ( ! $foo)#end               ## True</span><br><span class="line">#if ($foo &amp;&amp; $foo.bar)#end      ## False and $foo.bar will not be evaluated</span><br><span class="line">#if ($foo &amp;&amp; $foo == &quot;bar&quot;)#end ## False and $foo == &quot;bar&quot; wil not be evaluated</span><br><span class="line">#if ($foo1 || $foo2)#end        ## False $foo1 and $foo2 are not defined</span><br></pre></td></tr></table></figure>
<p>严格模式在 #if 指令中可以使用 &gt;, &lt;, &gt;= or &lt;=. 同时,参数 #foreach必须可以迭代的 (这种特性可以被属性指令.foreach.skip.invalid修改). 不过,在严格模式下没有定义的引用也将抛异常。</p>
<p>Velocity试图调用一个null值将导致异常. 对于简单的调用在这个实例中你可以用 ‘$!’代替 ‘$’, 这种类似于非严格模式。请记住，当你使用严格引用调用不存在的变量时会出现异常。例如, 下面的$foo 在上下文中值为null</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this is $foo    ## throws an exception because $foo is null</span><br><span class="line">this is $!foo   ## renders to &quot;this is &quot; without an exception</span><br><span class="line">this is $!bogus ## bogus is not in the context so throws an exception</span><br></pre></td></tr></table></figure>
<h2 id="模式替换"><a class="header-anchor" href="#模式替换">¶</a>模式替换</h2>
<p>现在你已经熟悉了引用, 你可以在你的模板中使用它们。Velocity引用利用了一些Java的设计原则进行设计，很容易使用。 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$foo</span><br><span class="line">$foo.getBar()</span><br><span class="line">## is the same as</span><br><span class="line">$foo.Bar</span><br><span class="line">$data.setUser(&quot;jon&quot;)</span><br><span class="line">## is the same as</span><br><span class="line">#set( $data.User = &quot;jon&quot; )</span><br><span class="line">$data.getRequest().getServerName()</span><br><span class="line">## is the same as</span><br><span class="line">$data.Request.ServerName</span><br><span class="line">## is the same as</span><br><span class="line">$&#123;data.Request.ServerName&#125;</span><br></pre></td></tr></table></figure>
<p>这些实例是提供了多重选择，但是效果却是一样的。Velocity利用Java的特性和Bean特性解决上下文中名字在对象和方法中的引用。它是可能的在你的模板中嵌入和引用的值.</p>
<p>Velocity是模仿sun公司的bean定义的规范，大小写敏感的; 然而，开发者尽可能的避免和纠正用户可能出现的错误 . 当<em>getFoo()</em> 方法在模板中被 $bar.foo引用时, Velocity首先将尝试着调用$getfoo。假如失败了, 它将尝试着调用$getFoo。同样的, 当一个模板引用 $bar.Foo, Velocity首先将尝试着调用 <em>$getFoo()</em> 然后在调用<em>getfoo()</em>.</p>
<p><em>注意: 在模板中引用实例变量是不允许的。仅仅引用属性等同于 JavaBean getter/setter 方法是可以的 (例如. $foo.Name能够通过 Foo’s getName()实例方法来引用 , 但是不是对一个公共的Name 实例的变量Foo).</em></p>
<h2 id="指令"><a class="header-anchor" href="#指令">¶</a>指令</h2>
<p>引用允许设计者在网页上生成动态的内容, 指令很容易使用脚本元素来创建和操纵输出的Java代码，并允许Web设计者关注网页的内容。</p>
<p>指令一直以 #开始. 像引用一样,指令的名字可能是相等的通过{ 和 } 符号. 这是好的方式在指令后跟文本. 例如下面的程序有一个错误:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if($a==1)true enough#elseno way!#end</span><br></pre></td></tr></table></figure>
<p>在这实例中, 使用方括号把 #else 与其他行分开.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if($a==1)true enough#&#123;else&#125;no way!#end</span><br></pre></td></tr></table></figure>
<p><strong>#set</strong> <em>#set</em> 指令被用来设定一个引用的值. 这个值能够被分配一个变量引用或者属性引用,这种情况发生在括号中, 如下实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $primate = &quot;monkey&quot; )</span><br><span class="line">#set( $customer.Behavior = $primate )</span><br></pre></td></tr></table></figure>
<p>左边的(LHS)必须分配一个变量引用或者属性引用. 右边的(RHS)可以是以下类型:</p>
<ul>
<li>Variable reference</li>
<li>String literal</li>
<li>Property reference</li>
<li>Method reference</li>
<li>Number literal</li>
<li>ArrayList</li>
<li>Map</li>
</ul>
<p>这些实例演示了上面的每种类型:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $monkey = $bill ) ## variable reference</span><br><span class="line">#set( $monkey.Friend = &quot;monica&quot; ) ## string literal</span><br><span class="line">#set( $monkey.Blame = $whitehouse.Leak ) ## property reference</span><br><span class="line">#set( $monkey.Plan = $spindoctor.weave($web) ) ## method reference</span><br><span class="line">#set( $monkey.Number = 123 ) ##number literal</span><br><span class="line">#set( $monkey.Say = [&quot;Not&quot;, $my, &quot;fault&quot;] ) ## ArrayList</span><br><span class="line">#set( $monkey.Map = &#123;&quot;banana&quot; : &quot;good&quot;, &quot;roast beef&quot; : &quot;bad&quot;&#125;) ## Map</span><br></pre></td></tr></table></figure>
<p>注释: 对于定义的ArrayList 实例元素可以使用ArrayList 类里面定义的方法, 例如, 你能够访问上面第一个元素使用$monkey.Say.get(0).</p>
<p>相似的, 对于Map实例, 元素通过 { } 操作符来定义你能够使用Map类中定义的方法. 例如, 你能够访问上面实例中第一个元素通过$monkey.Map.get(“banana”) 并且返回 ‘good’, 甚至你可以使用 $monkey.Map.banana来返回一样的值.</p>
<p>RHS也能使用简单的算术表达式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $value = $foo + 1 )</span><br><span class="line">#set( $value = $bar - 1 )</span><br><span class="line">#set( $value = $foo * $bar )</span><br><span class="line">#set( $value = $foo / $bar )</span><br></pre></td></tr></table></figure>
<p>假如RHS是一个null的属性和方法引用, 它将不能分配给LHS.这主要依赖你的配置,通过这种机制通常不能移除一个已经存在的引用. (注意它准许你改变Velocity配置属性). 新手对这点比较困惑. 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $result = $query.criteria(&quot;name&quot;) )</span><br><span class="line">The result of the first query is $result</span><br><span class="line">#set( $result = $query.criteria(&quot;address&quot;) )</span><br><span class="line">The result of the second query is $result</span><br></pre></td></tr></table></figure>
<p>如果*$query.criteria(“name”)* 返回”bill”,  <em>$query.criteria(“address”)</em> 返回null, 上面的 VTL将输出如下内容 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The result of the first query is bill</span><br><span class="line">The result of the second query is bill</span><br></pre></td></tr></table></figure>
<p>对于入门者对于 <em>#foreach</em> 循环企图#set一个应用通过一个属性或者方法引用是很迷惑的,接着通过 <em>#if</em>指令来进行测试. 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $criteria = [&quot;name&quot;, &quot;address&quot;] )</span><br><span class="line">#foreach( $criterion in $criteria )</span><br><span class="line">    #set( $result = $query.criteria($criterion) )</span><br><span class="line">    #if( $result )</span><br><span class="line">        Query was successful</span><br><span class="line">    #end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>在上面的实例中, 它并不希望通过*$result* 来决定查询是否成功. <em>$result</em> 之后通过 <em>#set</em> (增加到上下文中),它不能返回为null  (被移除从上下文中). <em>#if</em> 和 <em>#foreach</em>指令相关的细节将在之后的文档中都涉及到.</p>
<p>一种解决这种情况通过预设 <em>$result</em>为 <em>false</em>. 然后如果 <em>$query.criteria()</em> 调用失败, 你能够检测到.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $criteria = [&quot;name&quot;, &quot;address&quot;] )</span><br><span class="line">#foreach( $criterion in $criteria )</span><br><span class="line">    #set( $result = false )</span><br><span class="line">    #set( $result = $query.criteria($criterion) )</span><br><span class="line">    #if( $result )</span><br><span class="line">        Query was successful</span><br><span class="line">    #end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>不像其他的Velocity指令,<em>#set</em> 指令并没有 <em>#end</em>语句.</p>
<p><strong>Literals</strong>当你使用 <em>#set</em>指令的时候, 在双引号里面的字符串将被解析, 如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $directoryRoot = &quot;www&quot; )</span><br><span class="line">#set( $templateName = &quot;index.vm&quot; )</span><br><span class="line">#set( $template = &quot;$directoryRoot/$templateName&quot; )</span><br><span class="line">$template</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www/index.vm</span><br></pre></td></tr></table></figure>
<p>然而, 当字符串处在单引号中, 它将不被解析:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $foo = &quot;bar&quot; )</span><br><span class="line">$foo</span><br><span class="line">#set( $blargh = &#x27;$foo&#x27; )</span><br><span class="line">$blargh</span><br></pre></td></tr></table></figure>
<p>输出结果是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bar</span><br><span class="line">$foo</span><br></pre></td></tr></table></figure>
<p>默认情况, 这种特征使用单引号不解析Velocity中的可用变量. 你也可以通过改变velocity.properties 中的stringliterals.interpolate=false配置来改变这种默认设置.</p>
<p>或者,  <em>#[[<em>don’t parse me!</em>]]#</em> 语法准许模板设计者很容易的使用大量的语句块,而这些语句块中的变量不会被解析. 它特别有用尤其在避免有大量的指令上地方或者其他无效的内容(不想被解析的)VTL.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#[[</span><br><span class="line">#foreach ($woogie in $boogie)</span><br><span class="line">  nothing will happen to $woogie</span><br><span class="line">#end</span><br><span class="line">]]#</span><br></pre></td></tr></table></figure>
<p>显示如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#foreach ($woogie in $boogie)</span><br><span class="line">  nothing will happen to $woogie</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<h2 id="条件语句"><a class="header-anchor" href="#条件语句">¶</a>条件语句</h2>
<p><strong>If / ElseIf / Else</strong></p>
<p>Velocity中 <em>#if</em> 指令可以包含一段文本当生成Web网页时, 当条件语句为true时. 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if( $foo )</span><br><span class="line">   &lt;strong&gt;Velocity!&lt;/strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>变量*$foo*计算出是否是true，下面三种情况哪种情况将发生:</p>
<ul>
<li><em>如果是true值时，$foo是一个</em> boolean类型 (true/false)</li>
<li><em>如果不为空对象或空值时，$foo是一个字符串或条件表达式。</em></li>
<li><em>如果不为空对象，且不是字符串或条件表达式时，$foo</em>是一个对象。</li>
</ul>
<p>记住 Velocity上下文仅仅包含对象，所以当我们说 ‘boolean’,它将代表 Boolean (类)。这是真实的即使这个方法返回的值为布尔值，它内部其实返回的是一个Boolean 值。如果if为true <em>#if</em> 和 <em>#end</em> 内容将输出。在这个实例中, 假如 <em>$foo</em> 为 true, 它将输出为: “Velocity!”。相反的, 假如 <em>$foo</em> 有一个 null 值，或者它的布尔值为false, 这个语句的结果为false,这里将没有输出。</p>
<p><em>#elseif</em> 或者 <em>#else</em> 元素能够和*#if* 元素一起使用. 注意Velocity 模板将停止在第一个表达式中当发现第一个表达式为true时, 假设*$foo*值为 15 <em>$bar</em> 值为6.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if( $foo &lt; 10 )</span><br><span class="line">    &lt;strong&gt;Go North&lt;/strong&gt;</span><br><span class="line">#elseif( $foo == 10 )</span><br><span class="line">    &lt;strong&gt;Go East&lt;/strong&gt;</span><br><span class="line">#elseif( $bar == 6 )</span><br><span class="line">    &lt;strong&gt;Go South&lt;/strong&gt;</span><br><span class="line">#else</span><br><span class="line">    &lt;strong&gt;Go West&lt;/strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>在这个实例中, <em>$foo</em> 大于10，所以第一个两个比较是false。下一个*$bar* 和6相等, 所以显示true, 所以输出 <strong>Go South。</strong></p>
<p><strong>关系和逻辑操作符</strong></p>
<p>Velocity 使用等号决定两个变量之间的关系. 下面简单实例展示了等会的怎么使用.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set ($foo = &quot;deoxyribonucleic acid&quot;)</span><br><span class="line"></span><br><span class="line">#set ($bar = &quot;ribonucleic acid&quot;)</span><br><span class="line">#if ($foo == $bar)</span><br><span class="line">  In this case it&#x27;s clear they aren&#x27;t equivalent. So...</span><br><span class="line">#else</span><br><span class="line">  They are not equivalent and this will be the output.</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>注意 <em>==</em> 语法和Java中的语法是不同,Java中==仅仅表示对象是否相等. Velocity中的等号操作符仅仅表示两个数字,字符串,或对象的比较。当两个类对象是不同时, 字符串是通过调用toString()来获取的然后来比较.</p>
<p>Velocity的逻辑操作符有AND, OR 和NOT 操作符. 下面的逻辑操作符显示了 AND, OR 和NOT 操作符的使用.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## logical AND</span><br><span class="line">#if( $foo &amp;&amp; $bar )</span><br><span class="line">   &lt;strong&gt; This AND that&lt;/strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p><em>#if()</em> 指令结果为true 假如 <em>$foo</em> 和*$bar<em>都为true. 如果 <em>$foo</em>为false,表达式的结果为 false; <em>$bar</em>将不会计算. 如果 <em>$foo</em> 为 true,Velocity模板将计算</em>$bar*的值; 如果 <em>$bar</em>为 true, 然后整个表达式为true输出 <strong>This AND that</strong> . 如果 <em>$bar</em>为 false,如果表达式为false这里将没有输出.</p>
<p>逻辑表达OR 操作符也是这种情况,仅仅只有一种情况需要计算总个表达式,就是整个表达式为true.思考下面的实例.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## logical OR</span><br><span class="line">#if( $foo || $bar )</span><br><span class="line">    &lt;strong&gt;This OR That&lt;/strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>如果*$foo<em>为 true, Velocity模板不需要计算</em>$bar*; 不管*$bar* 是否为 true 或 false, 这整个表达式为true,<strong>This OR That</strong> 将被输出. 如果 <em>$foo</em> 为 false, 然而, <em>$bar</em>必须需要计算. 在这个实例中, 如果 <em>$bar</em> 也为 false,这表达式结果为 false 这里没有任何输出. 另一方面, 如果*$bar* 为 true, 然而整个表达式为true, 输出的结构是 <strong>This OR That</strong></p>
<p>逻辑运算符NOT ,这里仅仅有一个参数 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##logical NOT</span><br><span class="line">#if( !$foo )</span><br><span class="line">  &lt;strong&gt;NOT that&lt;/strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>这里, 如果*$foo<em>为 true, 然后</em>!$foo<em>计算结果为false,这里没有输出。如果 <em>$foo</em>为 false, 然而 <em>!$foo</em>计算结果为true 输出结果为 <strong>NOT that</strong> . 注意不要把它和静态引用 <em>$!foo</em> which混淆，它们是不同的。</em>（ifeve.com校对注：一个!在前，一个在后）*</p>
<p>这里也有字符形式的逻辑运算符如 <em>eq</em>, <em>ne</em>, <em>and</em>, <em>or</em>, <em>not</em>, <em>gt</em>, <em>ge</em>, <em>lt</em>, 和<em>le</em>.</p>
<p>温馨提示.当你希望在*#else* 指令后面包含一个文本你需要把else放在一个大括号 里面来表示它与后面的文本是不同的. (任何指令都能被放在括号里面, 通常用在*#else*中)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if( $foo == $bar)it&#x27;s true!#&#123;else&#125;it&#x27;s not!#end&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<h2 id="循环"><a class="header-anchor" href="#循环">¶</a>循环</h2>
<p><strong>Foreach Loop</strong>The <em>#foreach</em>元素用来循环操作. 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">#foreach( $product in $allProducts )</span><br><span class="line">    &lt;li&gt;$product&lt;/li&gt;</span><br><span class="line">#end</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p><em>#foreach</em>循环将把 <em>$allProducts</em>列表里面的值赋值给products . 每次遍历, <em>$allProducts</em> 里面的值将赋值给*$product*.</p>
<p><em>$allProducts</em> 变量的内容是一个数组, Hashtable 或者 Array. 分配给*$product* 变量的值是Java的对象和一个变量的引用. 例如, 假如 <em>$product</em>是Java里面一个真实的Product类, 它的名字能够被引用 <em>$<a href="http://product.Name">product.Name</a></em> 方法(ie: <em>$Product.getName()</em>).</p>
<p>比方说 <em>$allProducts</em> 是一个Hashtable. 假如你想引用Hashtable 里面的key, 你的代码可以这样写:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">#foreach( $key in $allProducts.keySet() )</span><br><span class="line">    &lt;li&gt;Key: $key -&gt; Value: $allProducts.get($key)&lt;/li&gt;</span><br><span class="line">#end</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>Velocity提供了一种简单的循环计数以至于你能够做一些事情,如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">#foreach( $customer in $customerList )</span><br><span class="line">    &lt;tr&gt;&lt;td&gt;$foreach.count&lt;/td&gt;&lt;td&gt;$customer.Name&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">#end</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>Velocity也提供了一种简单的方式来判断是否是最后一次迭代 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#foreach( $customer in $customerList )</span><br><span class="line">    $customer.Name#if( $foreach.hasNext ),#end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>如果你想从零开始的#foreach循环, 你可以使用 $foreach.index 代替$foreach.count. 同样的, $foreach.first 和 $foreach.last 也提供了$foreach.hasNext方式.如果你想访问 #foreach外面的这些属性, 你能够引用它们通过 $foreach.parent或 $foreach.topmost 属性 (e.g. $foreach.parent.index 或者 $foreach.topmost.hasNext).</p>
<p>你也可以设置最大的循环执行次数. 默认情况下没有设置 (可以指定一个值 0 或者更小的), 可以设置一个数字在velocity.properties 的配置文件里面. This is useful as a fail-safe.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The maximum allowed number of loops.</span><br><span class="line">directive.foreach.maxloops = -1</span><br></pre></td></tr></table></figure>
<p>如果你想停止一个foreach循环在你的模板中, 你可以使用 #break指令在任何时候停止循环:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## list first 5 customers only</span><br><span class="line">#foreach( $customer in $customerList )</span><br><span class="line">    #if( $foreach.count &gt; 5 )</span><br><span class="line">        #break</span><br><span class="line">    #end</span><br><span class="line">    $customer.Name</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<h2 id="引入"><a class="header-anchor" href="#引入">¶</a>引入</h2>
<p><em>#include</em>脚本元素准许设计者引入一个本地文件, 然后插入到你#include 指令所在的地方。文件的内容不经过模板引擎处理. 由于安全的原因,这个文件仅仅能够放在 TEMPLATE_ROOT下面.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include( &quot;one.txt&quot; )</span><br></pre></td></tr></table></figure>
<p><em>#include</em> 指定指向的文件放在括号之内. 假如包含多个文件,通过逗号进行分开.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include( &quot;one.gif&quot;,&quot;two.txt&quot;,&quot;three.htm&quot; )</span><br></pre></td></tr></table></figure>
<p>被引用的文件不需要通过名字引用; 实际上，通常使用一个变量来代替文件名。当你请求输出标准页面时非常方便。下面实例展示了文件名和变量.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include( &quot;greetings.txt&quot;, $seasonalstock )</span><br></pre></td></tr></table></figure>
<h2 id="解析"><a class="header-anchor" href="#解析">¶</a>解析</h2>
<p><em>#parse</em>脚本元素准许模板设计者引用一个包含VTL的本地文件。Velocity将解析其中的VTL并输出里面的元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#parse( &quot;me.vm&quot; )</span><br></pre></td></tr></table></figure>
<p>向 <em>#include</em>指令, <em>#parse</em>可以被看着携带一个变量而不是模板. 任何被 <em>#parse</em> 指令引用的模板必须放在TEMPLATE_ROOT下面. 不像 <em>#include</em>指令, <em>#parse</em> 仅仅携带了一个参数.</p>
<p>VTL模板中*#parse<em>应用的文件能够够嵌套引用包含</em>#parse<em>的模板. 默认为 10, 用户可以通过velocity.properties 中directive.parse.max.depth来自定义设置单个文件中</em>#parse<em>引用文件个数. (注意: 如果 velocity.properties文件中</em>directive.parse.max.depth*没有设置, Velocity默认为10.) 准许递归调用, 例如,如果dofoo.vm 模板包含下面的语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Count down.</span><br><span class="line">#set( $count = 8 )</span><br><span class="line">#parse( &quot;parsefoo.vm&quot; )</span><br><span class="line">All done with dofoo.vm!</span><br></pre></td></tr></table></figure>
<p>如果你引用parsefoo.vm模板, 它可以包含下面的VTL文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$count</span><br><span class="line">#set( $count = $count - 1 )</span><br><span class="line">#if( $count &gt; 0 )</span><br><span class="line">    #parse( &quot;parsefoo.vm&quot; )</span><br><span class="line">#else</span><br><span class="line">    All done with parsefoo.vm!</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>“Count down.” 之后的被显示, Velocity能够解析parsefoo.vm, 把count设置为8. 当count大于0, 它将显示 “All done with parsefoo.vm!” . 本实例中, Velocity将返回 dofoo.vm 并输出 “All done with dofoo.vm!” 语句.</p>
<h2 id="break"><a class="header-anchor" href="#break">¶</a>Break</h2>
<p><em>#break</em>指令停止任何正在执行的作用域中的输出. 执行作用域是本质上是 with content (i.e. #foreach, #parse, #evaluate, #define, #macro, 或者 #@somebodymacro) 或者 任何”root” 作用域(例如. template.merge(…), Velocity.evaluate(…) or velocityEngine.evaluate(…)). 不像#stop, #break 它仅仅停止的是循环内部, 作用域内部, 而不是整个程序.</p>
<p>如果你希望停止一个正在执行的作用域, 你可以使用作用域控制引用(例如. $foreach, $template, $evaluate, $define, $macro, or $somebodymacro) 作为一个参数#break. (例如. #break($macro)). 它将停止输出所有的到指定的一个. 在同一类型的嵌套范围内, 你能够访问它的父亲通过 $<scope>.parent 或者 $<scope>.最高的和传递这些到#break 代替(例如. #break($foreach.parent) o或者 #break($macro.topmost)).</p>
<h2 id="stop指令"><a class="header-anchor" href="#stop指令">¶</a>Stop指令</h2>
<p><em>#stop</em> 指令停止任何正在执行的输出。这是真实的即使嵌套另一个模板通过 #parse 指令或者位于一个velocity macro. 合并输出将包括所有的内容到遇到 #stop 指令的位置. 它是很方便的随时终止模板解析.出入调试的目的, 你可以提供一个将被写到stop命令执行前日志 (DEBUG 级别, 当然是)消息参数 (例如. #stop(‘$foo 并不在内容中’) ).</p>
<h2 id="evaluate指令"><a class="header-anchor" href="#evaluate指令">¶</a>Evaluate指令</h2>
<p><em>#evaluate</em>指令用来动态的计算。它可以在加载的时候适时计算一个字符串. 例如一个字符串可能被用来国家化或则包括一部分数据库模板.</p>
<p>下面的实例将显示abc.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set($source1 = &quot;abc&quot;)</span><br><span class="line">#set($select = &quot;1&quot;)</span><br><span class="line">#set($dynamicsource = &quot;$source$select&quot;)</span><br><span class="line">## $dynamicsource is now the string &#x27;$source1&#x27;</span><br><span class="line">#evaluate($dynamicsource)</span><br></pre></td></tr></table></figure>
<h2 id="define指令"><a class="header-anchor" href="#define指令">¶</a>Define指令</h2>
<p><em>#define</em>指令可以指定对VTL一个块的引用.</p>
<p>下面的实例将显示: Hello World!.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define( $block )Hello $who#end</span><br><span class="line">#set( $who = &#x27;World!&#x27; )</span><br><span class="line">$block</span><br></pre></td></tr></table></figure>
<h2 id="宏调用"><a class="header-anchor" href="#宏调用">¶</a>宏调用</h2>
<p><em>#macro</em> 脚本元素准许模板设计者定义一个可重用的VTL模板片段. Velocimacros(宏调用)被广泛用在简单和复杂的场景中.Velocimacro可以用来保存用户的点击次数和最少的板式错误, 提供一个简单的概念介绍。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#macro( d )</span><br><span class="line">&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>上个实例中Velocimacr被定义为<em>d</em>, 它可以像其他VTL方式一样被调用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#d()</span><br></pre></td></tr></table></figure>
<p>当*#d()<em>被调用的时, Velocity将用定义的一行内容来替换</em>#d()*.如果你想在行里面添加内容, 你也可以向下面这样来改变macro的定义:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#macro( d )</span><br><span class="line">&lt;tr&gt;&lt;td&gt;$!bodyContent&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>现在, 如果你想调用macro会和之前有点不同, 名字之前需要加上#@ 加上一个内容体,同时以#end调用, 当Velocity加载时遇见 $!bodyContent会进行显示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#@d()Hello!#end</span><br></pre></td></tr></table></figure>
<p>如果你一直坚持像之前那种方式调用, 我们使用隐形的引用代替body引用($!bodyContent 代替$bodyContent), 它将一直显示一个空的单元格.</p>
<p>Velocimacro也可以携带许多参数 — 甚至是不带参数, 如同第一个实例中, 参数是可选项– 但是当Velocimacro执行时, 它必须调用和你定义的方法的参数匹配. 被执行的Velocimacros要多于上面定义的. 下面实例所示一个Velocimacro携带两个参数一个是color和一个数组.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#macro( tablerows $color $somelist )</span><br><span class="line">#foreach( $something in $somelist )</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=$color&gt;$something&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">#end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>上面的Velocimacro实例中, 定义一个<em>tablerows</em>,带两个参数. 第一个参数是*$color*, 第二个参数是 <em>$somelist</em>.</p>
<p>任何可以被放到VTL模板中都可以作为Velocimacro的函数体.  <em>tablerows</em> 是Velocimacro的一个 <em>foreach</em>语句. 这里有两个 <em>#end</em>语句被定义在*#tablerows*中; 第一个是属于 <em>#foreach</em>, 第二个是属于Velocimacro .</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $greatlakes = [&quot;Superior&quot;,&quot;Michigan&quot;,&quot;Huron&quot;,&quot;Erie&quot;,&quot;Ontario&quot;] )</span><br><span class="line">#set( $color = &quot;blue&quot; )</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    #tablerows( $color $greatlakes )</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>注意*$greatlakes* 代替 <em>$somelist</em>. 当 <em>#tablerows</em>被调用时, 将输出以下内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Superior&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Michigan&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Huron&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Erie&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Ontario&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>Velocimacros能够定义在Velocity模板的行内，意味着在同一个网页上它不可以使用其他的Velocity模板。定义一个Velocimacro并在所有模板中共享,这使它具有明显的优势: 它避免了在各个页面中重复定义Velocimacro, 减少工作量并且可以避免错误, 这种也可以通过改变一个地方而达到其他地方一起修改的目的.</p>
<p><em>#tablerows($color $list)</em> Velocimacro 被定义在 Velocimacros 模板的依赖包中, 它可以保证在其他地方被大量使用. 它能够被多次重复使用来解决不同的问题. 在模板 mushroom.vm 中专注与正真的事情,<em>#tablerows</em> Velocimacro 能够被遍历,显示所有部分:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $parts = [&quot;volva&quot;,&quot;stipe&quot;,&quot;annulus&quot;,&quot;gills&quot;,&quot;pileus&quot;] )</span><br><span class="line">#set( $cellbgcol = &quot;#CC00FF&quot; )</span><br><span class="line">&lt;table&gt;</span><br><span class="line">#tablerows( $cellbgcol $parts )</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>当你请求mushroom.vm, Velocity 将在模板依赖包中查询*#tablerows* (在 velocity.properties 定义的) 并输出下面内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;#CC00FF&quot;&gt;volva&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;#CC00FF&quot;&gt;stipe&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;#CC00FF&quot;&gt;annulus&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;#CC00FF&quot;&gt;gills&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;#CC00FF&quot;&gt;pileus&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Velocimacro Arguments</strong>Velocimacros可以携带下面的VTL元素作为参数 :</p>
<ul>
<li>Reference : anything that starts with ‘$’</li>
<li>String literal : something like “$foo” or ‘hello’</li>
<li>Number literal : 1, 2 etc</li>
<li>IntegerRange : [ 1…2] or [$foo … $bar]</li>
<li>ObjectArray : [ “a”, “b”, “c”]</li>
<li>boolean value true</li>
<li>boolean value false</li>
</ul>
<p>当传递一个引用作为Velocimacros的参数时,注意引用是通过名字传递的. 这意味着它们的值是在Velocimacro中已经生成了. 这个特性准许你传递一个方法的调用引用在方法中也可以使用方法调用. 例如, 当我们调用下面的Velocimacro将显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#macro( callme $a )</span><br><span class="line">    $a $a $a</span><br><span class="line">#end</span><br><span class="line">#callme( $foo.bar() )</span><br></pre></td></tr></table></figure>
<p>在方法中 bar() 的结果将被调用三次.</p>
<p>第一次看到这个特性会发现很惊奇, 当你仔细的思考Velocimacros背后的动机–消除VTL中公共的重复使用 –它变的有意义. 它准许你做一些事情,比如传递一个对象的状态, 例如在Velocimacro中重复生成有颜色的表格对象.</p>
<p>如果你不想使用这个特性,你就想从一个引用的方法中获取值,你可以这样做 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $myval = $foo.bar() )</span><br><span class="line">#callme( $myval )</span><br></pre></td></tr></table></figure>
<p><strong>Velocimacro Properties</strong>在 velocity.properties 文件中准许灵活的实现Velocimacros. 这里也提供了开发者文档<a href="http://velocity.apache.org/engine/devel/developer-guide.html">Developer Guide</a>.</p>
<p>velocimacro.library – 一个通用的和其他依赖包分开的 Velocimacro模板依赖包. 默认, Velocity看起来想一个单独的 函数库: <em>VM_global_library.vm</em>. 配置模板的路径用来使用找到Velocimacro 函数库.</p>
<p>velocimacro.permissions.allow.inline – 这个属性的值可以是true或者false, 决定是否可以在模板中定义Velocimacros. 默认情况是, true, 准许模板设计者可以自行定义Velocimacros.</p>
<p>velocimacro.permissions.allow.inline.to.replace.global -它的值可以设定为true或者false, 这个设置准许用户指定一个模板中定义的Velocimacro能代替全局定义, 它在启动的时候被 velocimacro.library属性加载. 默认是, false, 避免在启动时候模板中定义的Velocimacros成为全局Velocimacros.</p>
<p>velocimacro.permissions.allow.inline.local.scope – 这个属性可能值为true 或者 false, 默认为 false, 控制 定义的Velocimacros对定义中的模板是可见的.简而言之, 如果这个属性设置为 true, 一个模板能够定义能够被定义的模板使用的VMs内 . You can use this for fancy VM tricks – if a global VM calls another global VM, 在行内的作用域内, 一个模板能够定义一个私有的实现第二个VM,它能被第一个VM调用. 但是对其他模板没有影响.</p>
<p>velocimacro.library.autoreload – 这个属性控制Velocimacro依赖包自动加载. 这个默认是的是false.当把属性设置为 true,当Velocimacro被执行时它将检查Velocimacro是否改变, 它重载很有必要的.它准许你改变和测试Velocimacro 不需要重庆你的应用和服务器容器, 仅仅像你可以用普通的模板. 这个模式需要关闭缓存才起作用(e.g.file.resource.loader.cache = false ). 这个特征主要用于开发模式, 而不是生产模式.</p>
<h2 id="获取字面量"><a class="header-anchor" href="#获取字面量">¶</a>获取字面量</h2>
<p>VTL使用了特殊字符,例如 <em>$</em> 和 <em>#</em>, 做为关键字, 所以一些使用者关注在模板中怎么使用这些字符.这章将讨论转义字符 .</p>
<p><strong>Currency(通用)</strong><br>
你这样写是没有问题的 “I bought a 4 lb. sack of potatoes at the farmer’s market for only $2.50!” 像上面提到的一样, VTL 标识符一直都是以大写或者小写的字母开始的, 所以 $2.50 不会被错误引用.</p>
<p><strong>Escaping Valid VTL References(屏蔽VTL中的引用)</strong><br>
你可能遇到这种情况,在Velocity中不想有一个引用输出. 屏蔽特殊的字符是输出特殊字符的最好的方式, 你可以使用反斜杠字符,当遇见这些特殊的字符是VTL引用的一部分时. <a href="http://velocity.apache.org/engine/devel/user-guide.html#escapinginvalidvtlreferences">*</a></p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">#</span><span class="title">set</span><span class="params">( $<span class="variable">email</span> = <span class="string">&quot;foo&quot;</span> )</span></span></span><br><span class="line">$email</span><br></pre></td></tr></table></figure>
<p>假如在你的Velocity 模板中遇到一个 <em>$email</em>,它将在上下文中查询并输出正确的值. 上实例中将输出 <em>foo</em>, 因为*$email* 已经被定义了.如果 <em>$email</em>is没有被定义, 它将输出*$email*.</p>
<p>加入 <em>$email</em> 已经定义了 (例如, 它的值为 <em>foo</em>), 但是你想输出 <em>$email</em>. 这里有几种方式可以实现, 最简单的方式是使用转义字符. 请看下面实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## The following line defines $email in this template:</span><br><span class="line">#set( $email = &quot;foo&quot; )</span><br><span class="line">$email</span><br><span class="line">\$email</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo</span><br><span class="line">$email</span><br></pre></td></tr></table></figure>
<p>如果,由于某种原因, 你需要在它之前添加一个反斜杠, 你需要按照下面实例做:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## The following line defines $email in this template:</span><br><span class="line">#set( $email = &quot;foo&quot; )</span><br><span class="line">\\$email</span><br><span class="line">\\\$email</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\foo</span><br><span class="line">\$email</span><br></pre></td></tr></table></figure>
<p>注意 <em>* 字符绑定到</em>$* 左边的字符. 左边绑定规则导致 <em>\$email</em> 输出为*$email*. 比较下面实例看看*$email*是否被定义.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$email</span><br><span class="line">\$email</span><br><span class="line">\\$email</span><br><span class="line">\\\$email</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$email</span><br><span class="line">\$email</span><br><span class="line">\\$email</span><br><span class="line">\\\$email</span><br></pre></td></tr></table></figure>
<p>注意Velocity定义的引用不同于那些没有定义的引用 . 本实例中*$foo* 定义值为<em>gibbous</em>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $foo = &quot;gibbous&quot; )</span><br><span class="line">$moon = $foo</span><br></pre></td></tr></table></figure>
<p>输出结果为: <em>$moon = gibbous</em> — <em>$moon</em>将作为字符输出而$foo的地方将输出<em>gibbous</em>.</p>
<p><strong>Escaping Invalid VTL References(转义不可用VTL引用)</strong><br>
有时候你可能会遇到这种情况,当你的Velocity解析你的模板时遇见了一个你从来都没有打算把它当着引用的不可用的引用. 屏蔽特殊的字符, 最好的方式是你能够处理把握这种情况,在这种情况下, 反斜杠可能会失败. 你可以使用简单的方式来屏蔽关于 $ 或 #问题, 你可能仅仅是替换一下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;my:invalid:non:reference&#125;</span><br></pre></td></tr></table></figure>
<p>可以想这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $D = &#x27;$&#x27; )</span><br><span class="line">$&#123;D&#125;&#123;my:invalid:non:reference&#125;</span><br></pre></td></tr></table></figure>
<p>你也可以通过Java代码把  $ 或 #字符串指令放到你的文本中  (例如 context.put(“D”,&quot;$&quot;);)来避免在你的模板中添加额外的 #set() 指令. 或者, 你也可以使用<a href="http://velocity.apache.org/tools/devel/">VelocityTools</a>, 你可以使用EscapeTool:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;esc.d&#125;&#123;my:invalid:non:reference&#125;</span><br></pre></td></tr></table></figure>
<p>有效的和无效的VTL 指令使用同样的方式进行转义的; 在指令章节将对此进行详细描述.</p>
<p><strong>Escaping VTL Directives(转义VTL指令)</strong><br>
VTL 指令能够被屏蔽通过反斜杠(“\”) 字符和疲敝VTL引用方式是一样的.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## #include( &quot;a.txt&quot; ) renders as &lt;contents of a.txt&gt;</span><br><span class="line">#include( &quot;a.txt&quot; )</span><br><span class="line">## \#include( &quot;a.txt&quot; ) renders as #include( &quot;a.txt&quot; )</span><br><span class="line">\#include( &quot;a.txt&quot; )</span><br><span class="line">## \\#include ( &quot;a.txt&quot; ) renders as \&lt;contents of a.txt&gt;</span><br><span class="line">\\#include ( &quot;a.txt&quot; )</span><br></pre></td></tr></table></figure>
<p>需要特别关心的是转义在一个单独的指令中包含多个脚本元素VTL 指令(例如在一个 if-else-end语句). 这里是一个典型的VTL if语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if( $jazz )</span><br><span class="line">    Vyacheslav Ganelin</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>如果 <em>$jazz</em>为 true, 输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vyacheslav Ganelin</span><br></pre></td></tr></table></figure>
<p>如果*$jazz* 为false,这里没有任何输出. Escaping 脚本元素修改输出结果. 考虑下面实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\#if( $jazz )</span><br><span class="line">    Vyacheslav Ganelin</span><br><span class="line">\#end</span><br></pre></td></tr></table></figure>
<p>它将导致指令被忽略, 但是变量 <em>$jazz</em> 正常显示. 所以, 如果*$jazz* 为 true,输出结果是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if( true )</span><br><span class="line">    Vyacheslav Ganelin</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>如果脚本之前的元素被反斜杠转义:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\#if( $jazz )</span><br><span class="line">   Vyacheslav Ganelin</span><br><span class="line">\\#end</span><br></pre></td></tr></table></figure>
<p>在本实例中, 如果*$jazz* 为 true,输出为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\ Vyacheslav Ganelin</span><br><span class="line">\</span><br></pre></td></tr></table></figure>
<p>为了了解这一点,注意 #if( arg ) 如果在新的一行结束时,输出时将省略这一行. 另外,  #if() 的语句块将紧跟着 ‘\’,  在#if()之前加入两个’\’. 最后的 \和文本在不同的行因为在 ‘Ganelin’之后有一个新行, 所以最终\, #end 之前的部分是程序体.</p>
<p>如果*$jazz*是 false, 输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\</span><br></pre></td></tr></table></figure>
<p>注意一些执行将被中断如果元素没有属性被转义.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\\#if( $jazz )</span><br><span class="line">    Vyacheslave Ganelin</span><br><span class="line">\\#end</span><br></pre></td></tr></table></figure>
<p>这里 <em>#if</em> 被转义, 但是这里保留一个 <em>#end</em> 标签; 多余的标签将导致解析错误.</p>
<h2 id="格式化问题"><a class="header-anchor" href="#格式化问题">¶</a>格式化问题</h2>
<p>虽然VTL的用户使用指南中经常显示换行符和空格,VTL显示如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $imperial = [&quot;Munetaka&quot;,&quot;Koreyasu&quot;,&quot;Hisakira&quot;,&quot;Morikune&quot;] )</span><br><span class="line">#foreach( $shogun in $imperial )</span><br><span class="line">    $shogun</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<p>上面实例和下面实例是等效的, Geir Magnusson Jr. 写给用户的邮件来说明这点完全无关:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Send me #set($foo=[&quot;$10 and &quot;,&quot;a pie&quot;])#foreach($a in $foo)$a#end please.</span><br></pre></td></tr></table></figure>
<p>Velocity可以去掉多余的空格. 前面的指令可以写成:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Send me</span><br><span class="line">#set( $foo = [&quot;$10 and &quot;,&quot;a pie&quot;] )</span><br><span class="line">#foreach( $a in $foo )</span><br><span class="line">$a</span><br><span class="line">#end</span><br><span class="line">please.</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Send me</span><br><span class="line">#set($foo       = [&quot;$10 and &quot;,&quot;a pie&quot;])</span><br><span class="line">                 #foreach           ($a in $foo )$a</span><br><span class="line">         #end please.</span><br></pre></td></tr></table></figure>
<p>在这些实例中输出结果将是一样的.</p>
<h2 id="其他的特性和杂记"><a class="header-anchor" href="#其他的特性和杂记">¶</a>其他的特性和杂记</h2>
<h3 id="math-算术操作"><a class="header-anchor" href="#math-算术操作">¶</a>Math(算术操作)</h3>
<p>Velocity中内置了一个算术函数,这些函数你可以在VTL模板中进行调用 .下面的实例分别展示加减乘数的使用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $foo = $bar + 3 )</span><br><span class="line">#set( $foo = $bar - 4 )</span><br><span class="line">#set( $foo = $bar * 6 )</span><br><span class="line">#set( $foo = $bar / 2 )</span><br></pre></td></tr></table></figure>
<p>当两个整数相除时,结果是整数, 小数部分被丢弃. 模板中也可以使用求模运算符 (<em>%</em>).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $foo = $bar % 5 )</span><br></pre></td></tr></table></figure>
<h3 id="范围操作符"><a class="header-anchor" href="#范围操作符">¶</a>范围操作符</h3>
<p>范围操作符能够结合着 <em>#set</em> 和 <em>#foreach</em> 语句使用. 用它能够产生一个证书数组,它的语法结果如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[n..m]</span><br></pre></td></tr></table></figure>
<p>产生一个n到m的整数. 不论m大于或者小于n都不重要;在这个实例中这个范围就是简单的计算.下面的实例展示了范围操作符的使用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一个实例:</span><br><span class="line">#foreach( $foo in [1..5] )</span><br><span class="line">$foo</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">第二个实例:</span><br><span class="line">#foreach( $bar in [2..-2] )</span><br><span class="line">$bar</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">第三个实例:</span><br><span class="line">#set( $arr = [0..1] )</span><br><span class="line">#foreach( $i in $arr )</span><br><span class="line">$i</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">第四个实例:</span><br><span class="line">[1..3]</span><br></pre></td></tr></table></figure>
<p>输出结果为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一个实例:</span><br><span class="line">1 2 3 4 5</span><br><span class="line"></span><br><span class="line">第二个实例:</span><br><span class="line">2 1 0 -1 -2</span><br><span class="line"></span><br><span class="line">第三个实例:</span><br><span class="line">0 1</span><br><span class="line"></span><br><span class="line">第四个实例:</span><br><span class="line">[1..3]</span><br></pre></td></tr></table></figure>
<p>注意范围操作符仅仅产生数组当结合 <em>#set</em> 和 <em>#foreach</em> 指令, 正如在第四个例子中展示的.</p>
<p>网页设计者关系一个制作标准大小的表格, 有些情况下没有足够的数据填充表格, 将发现范围操作符特别有用.</p>
<h3 id="高级问题-转义和"><a class="header-anchor" href="#高级问题-转义和">¶</a>高级问题:转义和!</h3>
<p>当一个引用前面加上*!* 字符和*!* 字符前面加上一个 ** 转义字符, 这种引用需要一种特殊的处理方式. 注意正规的转义符和特殊的\之后紧跟 *!*实例的不同:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $foo = &quot;bar&quot; )</span><br><span class="line">$\!foo</span><br><span class="line">$\!&#123;foo&#125;</span><br><span class="line">$\\!foo</span><br><span class="line">$\\\!foo</span><br></pre></td></tr></table></figure>
<p>输出结果为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$!foo</span><br><span class="line">$!&#123;foo&#125;</span><br><span class="line">$\!foo</span><br><span class="line">$\\!foo</span><br></pre></td></tr></table></figure>
<p>对比这个正规 <em>* 优先</em>$*的转义:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\$foo</span><br><span class="line">\$!foo</span><br><span class="line">\$!&#123;foo&#125;</span><br><span class="line">\\$!&#123;foo&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$foo</span><br><span class="line">$!foo</span><br><span class="line">$!&#123;foo&#125;</span><br><span class="line">\bar</span><br></pre></td></tr></table></figure>
<h3 id="杂记"><a class="header-anchor" href="#杂记">¶</a>杂记</h3>
<p>这一章节是关于Velocimacros一些小疑问.本章节以后还会经常改变 , 所以它很值得你关注.</p>
<p>Note : 贯穿整个章节, ‘Velocimacro’ 将被简写成 ‘VM’.</p>
<p>**我可以使用一个指令或者一个可以用的指令参数吗?**例如 : #center( #bold(“hello”) )</p>
<p>No. 一个指令不是一个可用的指令参数, 出于实用的目的, 一个VM是一个指令.</p>
<p><em>然而…</em>, 这里有很多事情你需要做. 一个容易的解决方案是利用编译器 ‘doublequote’ (“) 输出显示它的内容. 你可以想下面方式来做</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set($stuff = &quot;#bold(&#x27;hello&#x27;)&quot; )</span><br><span class="line">#center( $stuff )</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#center( &quot;#bold( &#x27;hello&#x27; )&quot; )</span><br></pre></td></tr></table></figure>
<p>在这个实例中参数是在VM中计算的,而不是在调用时 . 简而言之, the argument to the VM的参数传递到VM中进行计算 . 它准许你这么操作:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#macro( inner $foo )</span><br><span class="line">  inner : $foo</span><br><span class="line">#end</span><br><span class="line">#macro( outer $foo )</span><br><span class="line">   #set($bar = &quot;outerlala&quot;)</span><br><span class="line">   outer : $foo</span><br><span class="line">#end</span><br><span class="line">#set($bar = &#x27;calltimelala&#x27;)</span><br><span class="line">#outer( &quot;#inner($bar)&quot; )</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Outer : inner : outerlala</span><br></pre></td></tr></table></figure>
<p>因为 “#inner($bar)” 的计算发生在 #outer()的内部, 所以 $bar 的值是在 #outer() 内部进行赋值的.</p>
<p>这是一种有意的保护功能 – 参数通过名字传递到VMs, 所以你能够传递VMs像状态引用,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#macro( foo $color )</span><br><span class="line">  &lt;tr bgcolor=$color&gt;&lt;td&gt;Hi&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">  &lt;tr bgcolor=$color&gt;&lt;td&gt;There&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">#end</span><br><span class="line">#foo( $bar.rowColor() )</span><br></pre></td></tr></table></figure>
<p>rowColor()被重复调用,而不是仅仅调用一次.为了避免这种情况, 在VM外面执行方法, 并把值传递给VM.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set($color = $bar.rowColor())</span><br><span class="line">#foo( $color )</span><br></pre></td></tr></table></figure>
<p><strong>我可以注册一个宏变量 #parse() 吗?</strong></p>
<p><strong>可以在 Velocity 1.6 中实现</strong></p>
<p>如果你使用之前的版本, 你的Velocimacros必须第一次使用之前就已经被定义 .它的意思是有的当你使用  #macro()之前都已经被定义了.</p>
<p>这是很重要的如果你试图 #parse() 一个包含#macro() 指令模板. 因为 #parse() 在运行时才被调用,解析时 解析器决定是否在你的模板中 VM-looking 元素是一个 VM, #parse()-ing 设置 VM 声明并不向期望那样工作. 为了避开这一点, 可以使用 velocimacro.library来使Velocity启动时重新加载VMs.</p>
<p><strong>什么是宏自动加载?</strong></p>
<p>这个属性用在开发模式下,  而不是生成环境 :</p>
<p>velocimacro.library.autoreload</p>
<p>默认是false. 当设置为true时</p>
<p><type>.resource.loader.cache = false</p>
<p>（<type> 是你使用资源的名字, 例如 ‘file’) 然后Velocity将自动加载已经修改的Velocimacro依赖包文件当你配置该选项时, 所以你不比清空你的服务器(或者引用的)或者通过其他方式来是Velocimacros重载.</p>
<p>这里是一个简单的配置文件设置.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file.resource.loader.path = templates</span><br><span class="line">file.resource.loader.cache = false</span><br><span class="line">velocimacro.library.autoreload = true</span><br></pre></td></tr></table></figure>
<p>在生产环境不能使用这种配置.</p>
<h3 id="字符串的拼接"><a class="header-anchor" href="#字符串的拼接">¶</a>字符串的拼接</h3>
<p>开发者经常会问一个很普通的问题,就是怎么去拼接两个字符串?是不是类似于Java里面的’+’<em>?.</em></p>
<p>为了实现在VTL中两个字符串的拼接VTL, 你仅仅需要把它们放在一起. 你需要把他们放在一起当你需要的时候, 请看下面实例.</p>
<p>在一个有规则的 ‘schmoo’ 模板 (当你添加一个有规则的内容时) :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $size = &quot;Big&quot; )</span><br><span class="line">#set( $name = &quot;Ben&quot; )</span><br><span class="line"></span><br><span class="line">The clock is $size$name.</span><br></pre></td></tr></table></figure>
<p>输出结果为 ‘The clock is BigBen’. 这里有更多有趣的实例, 例如当你想拼接字符串并传递给一个方法时, 或者定义一个新的引用,你只需要这样做</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $size = &quot;Big&quot; )</span><br><span class="line">#set( $name = &quot;Ben&quot; )</span><br><span class="line"></span><br><span class="line">#set($clock = &quot;$size$name&quot; )</span><br><span class="line"></span><br><span class="line">The clock is $clock.</span><br></pre></td></tr></table></figure>
<p>它们的输出结果是一样的. 作为最后一个实例, 当你想在你的引用中添加一个 ‘static’字符串时 , 你需要使用正式的引用 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set( $size = &quot;Big&quot; )</span><br><span class="line">#set( $name = &quot;Ben&quot; )</span><br><span class="line"></span><br><span class="line">#set($clock = &quot;$&#123;size&#125;Tall$name&quot; )</span><br><span class="line"></span><br><span class="line">The clock is $clock.</span><br></pre></td></tr></table></figure>
<p>现在输出的是 ‘The clock is BigTallBen’。正式引用解析能够把 ‘$size’ 和’$sizeTall’ 通过 ‘{}’ 进行区分开.</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>velocity</tag>
      </tags>
  </entry>
</search>
